import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.RequestTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.RequestTypeStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entityes.history.model.DocaposteEventHistoryEntity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import org.hibernate.SessionFactory;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.database.JpaCursorItemReader;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class EventHistorySynchroItemReaderConfigTest {

    @Mock
    private EntityManager entityManager;

    @Mock
    private EntityManagerFactory entityManagerFactory;

    @Mock
    private SessionFactory sessionFactory;

    @Test
    void reader_shouldCreateJpaCursorItemReader() {
        // Given
        EventHistorySynchroItemReaderConfig config = new EventHistorySynchroItemReaderConfig();
        
        when(entityManager.getEntityManagerFactory()).thenReturn(entityManagerFactory);
        when(entityManagerFactory.unwrap(SessionFactory.class)).thenReturn(sessionFactory);

        // When
        ItemReader<DocaposteEventHistoryEntity> reader = config.reader(entityManager);

        // Then
        assertThat(reader).isNotNull();
        assertThat(reader).isInstanceOf(JpaCursorItemReader.class);
    }

    @Test
    void reader_shouldReturnNonNullReader() {
        // Given
        EventHistorySynchroItemReaderConfig config = new EventHistorySynchroItemReaderConfig();
        
        when(entityManager.getEntityManagerFactory()).thenReturn(entityManagerFactory);
        when(entityManagerFactory.unwrap(SessionFactory.class)).thenReturn(sessionFactory);

        // When
        ItemReader<DocaposteEventHistoryEntity> reader = config.reader(entityManager);

        // Then
        assertThat(reader).isNotNull();
    }

    @Test
    void reader_shouldHandleEntityManagerFactoryUnwrap() {
        // Given
        EventHistorySynchroItemReaderConfig config = new EventHistorySynchroItemReaderConfig();
        
        when(entityManager.getEntityManagerFactory()).thenReturn(entityManagerFactory);
        when(entityManagerFactory.unwrap(SessionFactory.class)).thenReturn(sessionFactory);

        // When
        ItemReader<DocaposteEventHistoryEntity> reader = config.reader(entityManager);

        // Then
        assertThat(reader).isNotNull();
        // Le test passe si aucune exception n'est levée pendant l'exécution
    }
}