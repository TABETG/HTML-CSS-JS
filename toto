Parfait üëç
Tu m‚Äôas envoy√© √† la fois :

le code source complet de BillingSpaceClosureProcessor.java,

et le pom.xml de ton module stream-fact-batch.


‚úÖ Ton POM contient d√©j√† spring-batch-test, mais pas les d√©pendances de test unitaires classiques (JUnit 5 + Mockito).
‚û°Ô∏è Voici donc le code complet et fonctionnel du test √† ajouter dans ton dossier
src/test/java/com/bnpparibas/dsibddf/ap00420/streamfact/batch/billingspace/close/processor/BillingSpaceClosureProcessorTest.java.


---

‚úÖ Fichier : BillingSpaceClosureProcessorTest.java

package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.processor;

import com.bnpparibas.bddf.cqrs.command.v2.CommandExecutorV2;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.CloseBillingSpaceCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.CloseBillingSpaceRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.pojo.BillingSpaceCloseToSend;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.model.BillingSpaceEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.model.LoanFolderEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.mapper.LoanFolderMapperToDomain;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
class BillingSpaceClosureProcessorTest {

    @Mock
    private CommandExecutorV2 commandExecutor;

    @InjectMocks
    private BillingSpaceClosureProcessor processor;

    @Test
    void process_should_execute_command_with_mapped_loan_folder() throws Exception {
        // GIVEN
        BillingSpaceEntity billingSpaceEntity = mock(BillingSpaceEntity.class);
        LoanFolderEntity loanFolderEntity = mock(LoanFolderEntity.class);
        when(billingSpaceEntity.getLoanFolder()).thenReturn(loanFolderEntity);

        Object mappedLoanFolder = new Object(); // objet domaine mapp√© simul√©
        BillingSpaceCloseToSend expectedResponse = mock(BillingSpaceCloseToSend.class);

        // WHEN : mock statique du mapper
        try (MockedStatic<LoanFolderMapperToDomain> mapperMock = mockStatic(LoanFolderMapperToDomain.class)) {
            mapperMock.when(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity))
                      .thenReturn(mappedLoanFolder);

            when(commandExecutor.execute(eq(CloseBillingSpaceCommand.class), any(CloseBillingSpaceRequest.class)))
                    .thenReturn(expectedResponse);

            // ACT
            BillingSpaceCloseToSend result = processor.process(billingSpaceEntity);

            // THEN
            assertThat(result).isEqualTo(expectedResponse);

            ArgumentCaptor<CloseBillingSpaceRequest> captor = ArgumentCaptor.forClass(CloseBillingSpaceRequest.class);
            verify(commandExecutor).execute(eq(CloseBillingSpaceCommand.class), captor.capture());
            CloseBillingSpaceRequest sentRequest = captor.getValue();
            assertThat(sentRequest.getLoanFolder()).isEqualTo(mappedLoanFolder);

            mapperMock.verify(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity));
        }
    }
}


---

üß© Ajoute ces d√©pendances test dans ton pom.xml

Place-les sous la balise <dependencies> (elles ne sont pas encore pr√©sentes dans ton POM) :

<!-- JUnit 5 -->
<dependency>
  <groupId>org.junit.jupiter</groupId>
  <artifactId>junit-jupiter</artifactId>
  <version>5.10.2</version>
  <scope>test</scope>
</dependency>

<!-- Mockito -->
<dependency>
  <groupId>org.mockito</groupId>
  <artifactId>mockito-core</artifactId>
  <version>5.12.0</version>
  <scope>test</scope>
</dependency>

<!-- Mockito inline : pour mocker les m√©thodes statiques -->
<dependency>
  <groupId>org.mockito</groupId>
  <artifactId>mockito-inline</artifactId>
  <version>5.2.0</version>
  <scope>test</scope>
</dependency>

<!-- AssertJ (optionnel pour de belles assertions) -->
<dependency>
  <groupId>org.assertj</groupId>
  <artifactId>assertj-core</artifactId>
  <version>3.25.3</version>
  <scope>test</scope>
</dependency>


---

üöÄ Pour ex√©cuter le test avec couverture IntelliJ

1. Clique droit sur la classe BillingSpaceClosureProcessorTest.


2. Choisis ‚ÄúRun 'BillingSpaceClosureProcessorTest' with Coverage‚Äù.


3. V√©rifie les barres vertes (code couvert) et ton pourcentage global (Jacoco/IntelliJ).




---

Souhaites-tu que je te pr√©pare une deuxi√®me classe de test d‚Äôint√©gration Spring Batch pour tester le step complet (JobConfigurationBillingSpaceClosure) avec @SpringBatchTest et @SpringBootTest ?
Cela permettrait d‚Äôaugmenter encore la couverture vers 85-90 %.