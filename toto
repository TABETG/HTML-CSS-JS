package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.BillingSpaceStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.repository.BillingSpaceJpaRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.Sort;

import java.lang.reflect.Field;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * JUnit4 – Couverture 100 % BillingSpaceSynchroItemReader
 * Compatible Sonar / Jenkins / Jacoco / Java 17+ / Spring Batch 5+
 */
@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceSynchroItemReaderTest {

    @Mock
    private BillingSpaceJpaRepository repository;

    @InjectMocks
    private BillingSpaceSynchroItemReader reader;

    @Before
    public void setUp() {
        assertNotNull(reader);
    }

    @Test
    public void init_should_initialize_all_internal_fields() throws Exception {
        reader.init();

        // Vérifie repository
        Object repo = getAnyField(reader, "repository");
        assertSame(repository, repo);

        // Vérifie methodName
        Object method = getAnyField(reader, "methodName");
        assertEquals("findByBillingSpaceStatus", method);

        // Vérifie arguments
        @SuppressWarnings("unchecked")
        List<Object> args = (List<Object>) getAnyField(reader, "arguments");
        assertNotNull(args);
        assertEquals(1, args.size());
        assertEquals(BillingSpaceStatusEnum.CREATED, args.get(0));

        // Vérifie sort (type Sort)
        Object sortObj = getAnyField(reader, "sort");
        assertNotNull(sortObj);
        assertTrue(sortObj instanceof Sort);
        Sort sort = (Sort) sortObj;
        assertTrue(sort.isSorted());
        assertTrue(sort.stream().anyMatch(order ->
                order.getProperty().equals("loanFolderId") &&
                order.getDirection() == Sort.Direction.ASC));

        verifyNoInteractions(repository);
    }

    @Test
    public void constructor_should_assign_repository_correctly() throws Exception {
        BillingSpaceJpaRepository mockRepo = mock(BillingSpaceJpaRepository.class);
        BillingSpaceSynchroItemReader customReader = new BillingSpaceSynchroItemReader(mockRepo);

        Object repoField = getAnyField(customReader, "repository");
        assertSame(mockRepo, repoField);

        customReader.init();
        Object methodName = getAnyField(customReader, "methodName");
        assertEquals("findByBillingSpaceStatus", methodName);

        verifyNoInteractions(mockRepo);
    }

    @Test
    public void init_should_be_idempotent_when_called_twice() throws Exception {
        reader.init();
        reader.init();
        Object args = getAnyField(reader, "arguments");
        assertNotNull(args);
        verifyNoInteractions(repository);
    }

    /** Recherche récursive d’un champ dans la hiérarchie de classes. */
    private Object getAnyField(Object instance, String name) throws Exception {
        Class<?> clazz = instance.getClass();
        while (clazz != null) {
            for (Field f : clazz.getDeclaredFields()) {
                if (f.getName().equals(name)) {
                    f.setAccessible(true);
                    return f.get(instance);
                }
            }
            clazz = clazz.getSuperclass();
        }
        throw new NoSuchFieldException("Champ introuvable : " + name);
    }
}