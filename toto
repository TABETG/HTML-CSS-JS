package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.job;

import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.pojo.SynchroResult;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.processor.BillingSpaceSynchroItemProcessor;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.reader.BillingSpaceSynchroItemReader;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.writer.BillingSpaceSynchroItemWriter;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.writer.EventHistorySynchroItemWriter;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.writer.LoanFolderSynchroItemWriter;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.listener.CommonStepExecutionListener;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.model.BillingSpaceEntity;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.item.support.CompositeItemWriter;
import org.springframework.transaction.PlatformTransactionManager;

import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 100% coverage pour JobConfigurationBillingSpaceSynchro.
 * Compatible Sonar / Jenkins / Jacoco.
 */
@RunWith(MockitoJUnitRunner.class)
public class JobConfigurationBillingSpaceSynchroTest {

    @InjectMocks
    private JobConfigurationBillingSpaceSynchro configuration;

    @Mock
    private BillingSpaceSynchroItemReader reader;

    @Mock
    private BillingSpaceSynchroItemProcessor processor;

    @Mock
    private EventHistorySynchroItemWriter eventHistorySynchroItemWriter;

    @Mock
    private LoanFolderSynchroItemWriter loanFolderSynchroItemWriter;

    @Mock
    private BillingSpaceSynchroItemWriter billingSpaceSynchroItemWriter;

    @Mock
    private CommonStepExecutionListener commonStepExecutionListener;

    @Mock
    private PlatformTransactionManager platformTransactionManager;

    @Mock
    private JobRepository jobRepository;

    private Step billingSpaceSynchroStep;

    @Before
    public void setUp() {
        billingSpaceSynchroStep = configuration.billingSpaceSynchroStep(jobRepository);
    }

    @Test
    public void billingSpaceSynchroStep_should_be_created_correctly() {
        assertNotNull(billingSpaceSynchroStep);
        assertEquals("billingSpaceSynchroStep", billingSpaceSynchroStep.getName());
        assertTrue(billingSpaceSynchroStep instanceof TaskletStep);

        TaskletStep ts = (TaskletStep) billingSpaceSynchroStep;
        Object allow = org.springframework.test.util.ReflectionTestUtils.getField(ts, "allowStartIfComplete");
        assertTrue((Boolean) allow);
    }

    @Test
    public void billingSpaceSynchroJob_should_be_created_correctly() {
        Job job = configuration.billingSpaceSynchroJob(jobRepository, billingSpaceSynchroStep);
        assertNotNull(job);
        assertTrue(job instanceof FlowJob);

        FlowJob flowJob = (FlowJob) job;
        assertEquals("billingSpaceSynchroJob", flowJob.getName());
        assertNotNull(flowJob.getStep("billingSpaceSynchroStep"));
    }

    @Test
    public void compositeItemWriter_should_return_writer_with_all_delegates() {
        CompositeItemWriter<SynchroResult> writer = configuration.compositeItemWriter();

        assertNotNull(writer);
        List<?> delegates = (List<?>) org.springframework.test.util.ReflectionTestUtils.getField(writer, "delegates");
        assertNotNull(delegates);
        assertEquals(3, delegates.size());
        assertTrue(delegates.contains(loanFolderSynchroItemWriter));
        assertTrue(delegates.contains(eventHistorySynchroItemWriter));
        assertTrue(delegates.contains(billingSpaceSynchroItemWriter));
    }

    @Test
    public void injected_dependencies_should_not_be_null() {
        assertNotNull(configuration);
        assertNotNull(reader);
        assertNotNull(processor);
        assertNotNull(eventHistorySynchroItemWriter);
        assertNotNull(loanFolderSynchroItemWriter);
        assertNotNull(billingSpaceSynchroItemWriter);
        assertNotNull(commonStepExecutionListener);
        assertNotNull(platformTransactionManager);
        assertNotNull(jobRepository);
    }

    @Test
    public void all_methods_should_execute_without_exception() {
        configuration.compositeItemWriter();
        configuration.billingSpaceSynchroStep(jobRepository);
        configuration.billingSpaceSynchroJob(jobRepository, billingSpaceSynchroStep);
        verifyNoInteractions(commonStepExecutionListener);
    }
}