package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.manager;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile;
import com.ibm.cloud.objectstorage.ClientConfiguration;
import com.ibm.cloud.objectstorage.auth.AWSCredentials;
import com.ibm.cloud.objectstorage.services.s3.AmazonS3;
import com.ibm.cloud.objectstorage.services.s3.model.*;
import org.apache.commons.lang3.StringUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.core.env.Environment;

import java.io.*;
import java.net.URL;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CloudFileManagerTest {

    @InjectMocks
    private CloudFileManager manager;

    @Mock
    private AmazonS3 s3Client;

    @Mock
    private Environment env;

    @Mock
    private AmazonS3 s3ClientNew;

    @Before
    public void setUp() throws Exception {
        // Injection manuelle des valeurs simulées
        setPrivate(manager, "bucketName", "bucket-test");
        setPrivate(manager, "bucketNameNew", "bucket-new");
        setPrivate(manager, "objectKeyNew", "object-key");
        setPrivate(manager, "prefix", "prefix");
        setPrivate(manager, "path", "/tmp/");
        setPrivate(manager, "cosCftName", "");
        setPrivate(manager, "endpointNew", new URL("http://localhost"));
        setPrivate(manager, "location", "eu-fr2");
        setPrivate(manager, "cosIamEndpoint", "iam.endpoint");
        setPrivate(manager, "cosTimeOut", 5000);
        setPrivate(manager, "env", env);
    }

    @Test
    public void test_createClientConfig_and_createCredentials() throws Exception {
        Object config = invokePrivate(manager, "createClientConfig");
        assertTrue(config instanceof ClientConfiguration);

        Object creds = invokePrivate(manager, "createCredentials", "apiKey", "resId");
        assertTrue(creds instanceof AWSCredentials);
    }

    @Test
    public void test_beanAmazonS3Legacy_withAndWithoutCosCftName() throws Exception {
        when(env.getProperty(anyString())).thenReturn("dummy");
        // sans cosCftName
        AmazonS3 s3A = manager.beanAmazonS3Legacy();
        assertNotNull(s3A);
        // avec cosCftName
        setPrivate(manager, "cosCftName", "testCft");
        AmazonS3 s3B = manager.beanAmazonS3Legacy();
        assertNotNull(s3B);
    }

    @Test
    public void test_getListOfObjects_returns_nonEmptyList() throws Exception {
        ListObjectsV2Result result = mock(ListObjectsV2Result.class);
        S3ObjectSummary summary = new S3ObjectSummary();
        summary.setKey("prefix/file1");
        when(result.getObjectSummaries()).thenReturn(Collections.singletonList(summary));
        when(s3ClientNew.listObjectsV2(anyString(), anyString())).thenReturn(result);

        List<String> list = invokePrivateList(manager, "getListOfObjects", s3ClientNew);
        assertEquals(1, list.size());
    }

    @Test
    public void test_getListOfObjects_handles_null_result() throws Exception {
        when(s3ClientNew.listObjectsV2(anyString(), anyString())).thenReturn(null);
        List<String> list = invokePrivateList(manager, "getListOfObjects", s3ClientNew);
        assertTrue(list.isEmpty());
    }

    @Test
    public void test_downloadFileCft_ok() throws Exception {
        // Mock interne pour getListOfObjects()
        CloudFileManager spy = spy(manager);
        doReturn(Collections.singletonList("f1")).when(spy).invokePrivateList(eq("getListOfObjects"), any());

        AmazonS3 mockS3 = mock(AmazonS3.class);
        doReturn(mockS3).when(spy).beanAmazonS3Legacy();
        doNothing().when(mockS3).getObject(any(GetObjectRequest.class), any(File.class));

        File[] result = spy.downloadFileCft();
        assertNotNull(result);
    }

    @Test
    public void test_archiveFile_with_existing_file() throws Exception {
        File tmp = File.createTempFile("meteor", ".zip");
        try (FileWriter w = new FileWriter(tmp)) { w.write("data"); }
        setPrivate(manager, "path", tmp.getParent() + "/");
        when(s3Client.putObject(anyString(), anyString(), any(InputStream.class), any(ObjectMetadata.class))).thenReturn(new PutObjectResult());

        manager.archiveFile(tmp.getName());
        verify(s3Client, atLeastOnce()).putObject(anyString(), anyString(), any(InputStream.class), any(ObjectMetadata.class));
    }

    @Test
    public void test_archiveFile_handles_exceptions() throws Exception {
        setPrivate(manager, "path", "/invalid/");
        manager.archiveFile("nofile.txt"); // devrait déclencher log.error, mais pas d’exception
    }

    @Test
    public void test_archiveFile_withMeteorFile() throws Exception {
        File tmp = File.createTempFile("f", ".zip");
        try (FileWriter w = new FileWriter(tmp)) { w.write("ok"); }
        MeteorFile meteorFile = new MeteorFile(tmp, tmp.getName());
        doNothing().when(s3Client).putObject(anyString(), anyString(), any(InputStream.class), any(ObjectMetadata.class));
        doNothing().when(s3ClientNew).deleteObject(any(DeleteObjectRequest.class));

        CloudFileManager spy = spy(manager);
        doReturn(s3ClientNew).when(spy).beanAmazonS3Legacy();
        spy.archiveFile(meteorFile);
        verify(spy, atLeastOnce()).beanAmazonS3Legacy();
    }

    @Test
    public void test_archiveFile_withMeteorFile_IOException() throws Exception {
        MeteorFile meteorFile = new MeteorFile(new File("/invalid/file.zip"), "file.zip");
        manager.archiveFile(meteorFile); // log.error attendu
    }

    @Test
    public void test_deleteFileNewbacket_executes_delete() throws Exception {
        CloudFileManager spy = spy(manager);
        AmazonS3 mockS3 = mock(AmazonS3.class);
        doReturn(mockS3).when(spy).beanAmazonS3Legacy();
        doNothing().when(mockS3).deleteObject(any(DeleteObjectRequest.class));
        invokePrivate(spy, "deleteFileNewbacket", "file");
        verify(mockS3, times(1)).deleteObject(any(DeleteObjectRequest.class));
    }

    @Test
    public void test_getFiles_with_empty_download() throws Exception {
        CloudFileManager spy = spy(manager);
        doReturn(new File[0]).when(spy).downloadFileCft();
        List<MeteorFile> list = spy.getFiles();
        assertTrue(list.isEmpty());
    }

    @Test
    public void test_getFiles_with_valid_files() throws Exception {
        CloudFileManager spy = spy(manager);
        File tmp = File.createTempFile("f", ".zip");
        doReturn(new File[]{tmp}).when(spy).downloadFileCft();
        List<MeteorFile> list = spy.getFiles();
        assertEquals(1, list.size());
    }

    // -------------------------------------------------
    //   OUTILS REFLEXION GÉNÉRIQUES
    // -------------------------------------------------

    private void setPrivate(Object instance, String field, Object value) throws Exception {
        Field f = instance.getClass().getDeclaredField(field);
        f.setAccessible(true);
        f.set(instance, value);
    }

    private Object invokePrivate(Object instance, String method, Object... args) throws Exception {
        Class<?>[] types = new Class<?>[args.length];
        for (int i = 0; i < args.length; i++) types[i] = args[i].getClass();
        java.lang.reflect.Method m = instance.getClass().getDeclaredMethod(method, types);
        m.setAccessible(true);
        return m.invoke(instance, args);
    }

    @SuppressWarnings("unchecked")
    private List<String> invokePrivateList(Object instance, String method, Object... args) throws Exception {
        return (List<String>) invokePrivate(instance, method, args);
    }
}