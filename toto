package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.create;

import com.bnpparibas.bddf.cqrs.command.v2.CommandExecutorV2;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.create.CreateBillingSpaceCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.create.CreateBillingSpaceRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.complete.CompleteLoanFoldersCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.complete.CompleteLoanFoldersRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.createeligiblefolders.CreateEligibleLoanFoldersCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.createeligiblefolders.CreateEligibleLoanFoldersRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.billingspace.model.BillingSpace;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.loanfolder.model.LoanFolder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class CreateBillingSpaceTaskletTest {

    @Mock private CommandExecutorV2 commandExecutor;
    @Mock private StepContribution contribution;
    @Mock private ChunkContext chunkContext;

    @InjectMocks
    private CreateBillingSpaceTasklet tasklet;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        // @InjectMocks a déjà injecté commandExecutor dans le champ @Autowired
    }

    @Test
    void execute_callsCommandsInOrder_andWiresPreviousResults_intoNextRequests_andReturnsFinished() throws Exception {
        // Given: résultats factices
        List<LoanFolder> eligible = Arrays.asList(mock(LoanFolder.class), mock(LoanFolder.class));
        List<LoanFolder> complete = Arrays.asList(mock(LoanFolder.class));
        List<BillingSpace> spaces = Arrays.asList(mock(BillingSpace.class));

        // Stubs sur les 3 commandes
        when(commandExecutor.execute(eq(CreateEligibleLoanFoldersCommand.class), any(CreateEligibleLoanFoldersRequest.class)))
                .thenReturn(eligible);
        when(commandExecutor.execute(eq(CompleteLoanFoldersCommand.class), any(CompleteLoanFoldersRequest.class)))
                .thenReturn(complete);
        when(commandExecutor.execute(eq(CreateBillingSpaceCommand.class), any(CreateBillingSpaceRequest.class)))
                .thenReturn(spaces);

        // When
        RepeatStatus status = tasklet.execute(contribution, chunkContext);

        // Then
        assertEquals(RepeatStatus.FINISHED, status);

        // Vérifie l'ordre des invocations
        InOrder inOrder = inOrder(commandExecutor);
        inOrder.verify(commandExecutor).execute(eq(CreateEligibleLoanFoldersCommand.class), any(CreateEligibleLoanFoldersRequest.class));
        inOrder.verify(commandExecutor).execute(eq(CompleteLoanFoldersCommand.class), any(CompleteLoanFoldersRequest.class));
        inOrder.verify(commandExecutor).execute(eq(CreateBillingSpaceCommand.class), any(CreateBillingSpaceRequest.class));

        // Capture des requêtes pour inspection du contenu
        ArgumentCaptor<CreateEligibleLoanFoldersRequest> cap1 = ArgumentCaptor.forClass(CreateEligibleLoanFoldersRequest.class);
        ArgumentCaptor<CompleteLoanFoldersRequest> cap2 = ArgumentCaptor.forClass(CompleteLoanFoldersRequest.class);
        ArgumentCaptor<CreateBillingSpaceRequest> cap3 = ArgumentCaptor.forClass(CreateBillingSpaceRequest.class);

        verify(commandExecutor).execute(eq(CreateEligibleLoanFoldersCommand.class), cap1.capture());
        verify(commandExecutor).execute(eq(CompleteLoanFoldersCommand.class), cap2.capture());
        verify(commandExecutor).execute(eq(CreateBillingSpaceCommand.class), cap3.capture());

        // cap1 : rien de spécial à l'entrée, juste non null
        assertNotNull(cap1.getValue());

        // cap2 : doit contenir la liste "eligible" dans le champ "eligibleLoanFolders"
        Object eligibleLoanFolders = readField(cap2.getValue(), "eligibleLoanFolders");
        assertSame(eligible, eligibleLoanFolders, "La requête Complete doit réutiliser la liste issue de la 1ère commande");

        // cap3 : doit contenir la liste "complete" dans le champ "eligibleAndCompleteloanFolders"
        Object eligibleAndComplete = readField(cap3.getValue(), "eligibleAndCompleteloanFolders");
        assertSame(complete, eligibleAndComplete, "La requête CreateBillingSpace doit réutiliser la liste issue de la 2ème commande");

        verifyNoMoreInteractions(commandExecutor);
    }

    @Test
    void execute_propagatesException_ifCommandExecutorFails() throws Exception {
        // Given: la 2e commande lève une exception
        when(commandExecutor.execute(eq(CreateEligibleLoanFoldersCommand.class), any(CreateEligibleLoanFoldersRequest.class)))
                .thenReturn(Arrays.asList(mock(LoanFolder.class)));
        when(commandExecutor.execute(eq(CompleteLoanFoldersCommand.class), any(CompleteLoanFoldersRequest.class)))
                .thenThrow(new RuntimeException("boom"));

        // When/Then
        assertThrows(RuntimeException.class, () -> tasklet.execute(contribution, chunkContext));
    }

    // ==== utilitaire réflexion robuste ====
    private static Object readField(Object target, String name) throws Exception {
        Field f = findField(target.getClass(), name);
        assertNotNull(f, "Champ introuvable: " + name);
        f.setAccessible(true);
        return f.get(target);
    }

    private static Field findField(Class<?> type, String name) {
        for (Class<?> c = type; c != null; c = c.getSuperclass()) {
            try {
                return c.getDeclaredField(name);
            } catch (NoSuchFieldException ignored) {}
        }
        return null;
    }
}