// src/test/java/com/bnpparibas/dsibddf/ap00420/streamfact/batch/replay/recalculcompletude/processor/RecalculCompletudeItemProcessorTest.java
package com.bnpparibas.dsibddf.ap00420.streamfact.batch.replay.recalculcompletude.processor;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.engines.LoanFoldersCalculator;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.loanfolder.model.Contract;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.loanfolder.model.LoanFolder;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.repository.contrat.ContractRepository;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.repository.contrat.ContractResponse;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.mapper.LoanFolderMapperToDomain;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.model.LoanFolderEntity;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Field;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RecalculCompletudeItemProcessorTest {

    @Test
    void process_should_cover_all_lines() throws Exception {
        // Arrange
        RecalculCompletudeItemProcessor processor = new RecalculCompletudeItemProcessor();

        ContractRepository contractRepository = mock(ContractRepository.class);
        Field f = RecalculCompletudeItemProcessor.class.getDeclaredField("contractRepository");
        f.setAccessible(true);
        f.set(processor, contractRepository);

        LoanFolderEntity entity = mock(LoanFolderEntity.class);
        LoanFolder loanFolder = mock(LoanFolder.class);

        try (MockedStatic<LoanFolderMapperToDomain> mapperStatic =
                     Mockito.mockStatic(LoanFolderMapperToDomain.class)) {

            mapperStatic.when(() -> LoanFolderMapperToDomain.toDomain(entity))
                        .thenReturn(loanFolder);

            Contract c1 = mock(Contract.class);
            Contract c2 = mock(Contract.class);
            when(loanFolder.getContracts()).thenReturn(List.of(c1, c2));
            when(c1.getLoanId()).thenReturn("L1");
            when(c2.getLoanId()).thenReturn("L2");

            ContractResponse r1 = mock(ContractResponse.class);
            ContractResponse r2 = mock(ContractResponse.class);
            when(contractRepository.searchContract("L1")).thenReturn(r1);
            when(contractRepository.searchContract("L2")).thenReturn(r2);

            // <<< DIFF ICI : type du builder >>>
            LoanFoldersCalculator.DomainBuilder builder =
                    mock(LoanFoldersCalculator.DomainBuilder.class, RETURNS_SELF);

            LoanFoldersCalculator calculator = mock(LoanFoldersCalculator.class);
            when(builder.build()).thenReturn(calculator);

            LoanFolder expected = mock(LoanFolder.class);
            when(calculator.updateWithContractResponses(loanFolder)).thenReturn(expected);

            try (MockedStatic<LoanFoldersCalculator> calcStatic =
                         Mockito.mockStatic(LoanFoldersCalculator.class)) {

                calcStatic.when(LoanFoldersCalculator::domainBuilder).thenReturn(builder);

                // Act
                LoanFolder result = processor.process(entity);

                // Assert
                assertSame(expected, result);
                verify(builder, times(1)).contractResponseList(anyList());
                verify(contractRepository).searchContract("L1");
                verify(contractRepository).searchContract("L2");
                mapperStatic.verify(() -> LoanFolderMapperToDomain.toDomain(entity), times(1));
                calcStatic.verify(LoanFoldersCalculator::domainBuilder, times(1));
            }
        }
    }
}