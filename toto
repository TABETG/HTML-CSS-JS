package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.BillingSpaceStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.model.BillingSpaceEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.repository.BillingSpaceJpaRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.Sort;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceSynchroItemReaderTest {

    @Mock
    private BillingSpaceJpaRepository repository;

    @InjectMocks
    private BillingSpaceSynchroItemReader reader;

    @Before
    public void setUp() {
        // rien de spécifique à préparer ici
    }

    @Test
    public void init_should_set_repository_method_and_arguments_correctly() {
        reader.init();

        assertNotNull(reader);
        assertEquals("findByBillingSpaceStatus", reader.getMethodName());
        assertSame(repository, reader.getRepository());

        Map<String, Sort.Direction> sortMap = reader.getSort();
        assertNotNull(sortMap);
        assertTrue(sortMap.containsKey("loanFolderId"));
        assertEquals(Sort.Direction.ASC, sortMap.get("loanFolderId"));

        List<?> args = reader.getArguments();
        assertNotNull(args);
        assertEquals(1, args.size());
        assertEquals(BillingSpaceStatusEnum.CREATED, args.get(0));

        verifyNoInteractions(repository);
    }

    @Test
    public void constructor_should_assign_repository() {
        BillingSpaceJpaRepository mockRepo = mock(BillingSpaceJpaRepository.class);
        BillingSpaceSynchroItemReader customReader = new BillingSpaceSynchroItemReader(mockRepo);
        assertSame(mockRepo, getPrivateRepository(customReader));
    }

    private BillingSpaceJpaRepository getPrivateRepository(BillingSpaceSynchroItemReader readerInstance) {
        try {
            java.lang.reflect.Field field = BillingSpaceSynchroItemReader.class.getDeclaredField("repository");
            field.setAccessible(true);
            return (BillingSpaceJpaRepository) field.get(readerInstance);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}