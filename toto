package com.bnpparibas.dsibddf.ap00420.streamfact.batch.sendtobmd.service.batch.security.openpgp;

import org.bouncycastle.openpgp.PGPSignature;
import org.bouncycastle.openpgp.PGPSignatureSubpacketVector;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class OnePassSignatureProcessorTest {

    private OnePassSignatureProcessor processor;

    @Before
    public void setUp() {
        processor = new OnePassSignatureProcessor();
    }

    // Vérifie annotation et constantes
    @Test
    public void class_should_have_component_and_constants() throws Exception {
        assertNotNull(OnePassSignatureProcessor.class.getAnnotation(Component.class));
        Field provider = OnePassSignatureProcessor.class.getDeclaredField("PROVIDER");
        Field buffer = OnePassSignatureProcessor.class.getDeclaredField("BUFFER_SIZE");
        provider.setAccessible(true);
        buffer.setAccessible(true);
        assertEquals("BC", provider.get(null));
        assertTrue((int) buffer.get(null) > 0);
    }

    // Appels publics : vérifie exception IllegalArgumentException
    @Test(expected = IllegalArgumentException.class)
    public void encrypt_should_throw_when_partners_list_is_empty() throws Exception {
        Method m = findPublicMethod("encryptOnePassSignature");
        m.setAccessible(true);
        Object[] args = new Object[]{
                "enc.out",
                "in.txt",
                Collections.emptyList(),
                null,
                false,
                false,
                false
        };
        try {
            m.invoke(processor, args);
        } catch (Exception e) {
            throw (IllegalArgumentException) e.getCause();
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void decrypt_should_throw_when_private_key_pair_is_null() throws Exception {
        Method m = findPublicMethod("decryptOnePassSignature");
        m.setAccessible(true);
        Object[] args = new Object[]{
                "enc.in",
                Collections.emptyList(),
                null,
                "dec.out",
                false
        };
        try {
            m.invoke(processor, args);
        } catch (Exception e) {
            throw (IllegalArgumentException) e.getCause();
        }
    }

    // Private methods tests
    @Test
    public void existsAndNotEmptyContent_should_cover_true_and_false() throws Exception {
        File f = File.createTempFile("ops", ".tmp");
        f.deleteOnExit();
        try (FileWriter w = new FileWriter(f)) { w.write("x"); }

        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("existsAndNotEmptyContent", String.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(processor, f.getAbsolutePath()));
        assertFalse((boolean) m.invoke(processor, "not_exists.file"));
    }

    @Test
    public void isPGPKeyFile_should_return_false_for_non_pgp() throws Exception {
        File f = File.createTempFile("ops_key", ".dat");
        f.deleteOnExit();
        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("isPGPKeyFile", String.class);
        m.setAccessible(true);
        assertFalse((boolean) m.invoke(processor, f.getAbsolutePath()));
    }

    @Test
    public void isValidPGPPublicKey_should_cover_all_branches() throws Exception {
        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("isValidPGPPublicKey", PGPPublicKey.class, String.class);
        m.setAccessible(true);

        PGPPublicKey key1 = mock(PGPPublicKey.class);
        when(key1.getValidSeconds()).thenReturn(0L);
        assertTrue((boolean) m.invoke(processor, key1, "file.asc"));

        PGPPublicKey key2 = mock(PGPPublicKey.class);
        when(key2.getValidSeconds()).thenReturn(999999L);
        when(key2.getCreationTime()).thenReturn(new Date(System.currentTimeMillis() - 60_000));
        assertTrue((boolean) m.invoke(processor, key2, "file.asc"));

        PGPPublicKey key3 = mock(PGPPublicKey.class);
        when(key3.getValidSeconds()).thenReturn(1L);
        when(key3.getCreationTime()).thenReturn(new Date(System.currentTimeMillis() - 3_600_000));
        when(key3.getKeyID()).thenReturn(0x1234L);
        assertFalse((boolean) m.invoke(processor, key3, "file.asc"));
    }

    @Test
    public void isMatchingUsage_should_cover_true_and_false() throws Exception {
        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("isMatchingUsage", PGPSignature.class, int.class);
        m.setAccessible(true);

        PGPSignature sig1 = mock(PGPSignature.class);
        when(sig1.hasSubpackets()).thenReturn(false);
        assertTrue((boolean) m.invoke(processor, sig1, 1));

        PGPSignature sig2 = mock(PGPSignature.class);
        PGPSignatureSubpacketVector vec = mock(PGPSignatureSubpacketVector.class);
        when(sig2.hasSubpackets()).thenReturn(true);
        when(sig2.getHashedSubPackets()).thenReturn(vec);

        Field keyFlagsField = OnePassSignatureProcessor.class.getDeclaredField("KEY_FLAGS");
        keyFlagsField.setAccessible(true);
        int KEY_FLAGS_INDEX = (int) keyFlagsField.get(null);

        when(vec.hasSubpacket(KEY_FLAGS_INDEX)).thenReturn(true);
        when(vec.getKeyFlags()).thenReturn(0);
        assertFalse((boolean) m.invoke(processor, sig2, 2));
    }

    // Helpers
    private Method findPublicMethod(String name) {
        for (Method m : OnePassSignatureProcessor.class.getDeclaredMethods()) {
            if (m.getName().equals(name)) return m;
        }
        fail("Méthode publique introuvable : " + name);
        return null;
    }
}