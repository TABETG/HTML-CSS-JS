package com.bnpparibas.dsibddf.ap00420.streamfact.batch.replay.sendpaymentrequestprocessed.processor;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.model.DocaposteEventHistory;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.mapper.DocaposteEventHistoryEntityMapperToDomain;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.model.DocaposteEventHistoryEntity;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.item.ItemProcessor;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * JUnit 4 – 100% coverage (lignes + branches) pour SendPaymentRequestProcessedProcessor.
 * Aucune dépendance JUnit Jupiter / AssertJ. Compatible Sonar/Jenkins/Jacoco.
 *
 * Dépendances test requises :
 *  - junit:junit:4.13.2
 *  - org.mockito:mockito-core:4.11.0
 *  - org.mockito:mockito-inline:4.11.0   (pour le mock des méthodes statiques)
 */
@RunWith(MockitoJUnitRunner.class)
public class SendPaymentRequestProcessedProcessorTest {

    private SendPaymentRequestProcessedProcessor processor;

    @Before
    public void setUp() {
        processor = new SendPaymentRequestProcessedProcessor();
    }

    @Test
    public void process_should_call_static_mapper_and_return_domain() {
        DocaposteEventHistoryEntity input = new DocaposteEventHistoryEntity();
        DocaposteEventHistory expected = new DocaposteEventHistory();

        try (MockedStatic<DocaposteEventHistoryEntityMapperToDomain> mocked =
                     Mockito.mockStatic(DocaposteEventHistoryEntityMapperToDomain.class)) {

            mocked.when(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(input))
                  .thenReturn(expected);

            DocaposteEventHistory result = processor.process(input);

            assertNotNull(result);
            assertSame(expected, result);
            mocked.verify(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(input), times(1));
        }
    }

    @Test
    public void process_should_return_null_when_mapper_returns_null() {
        DocaposteEventHistoryEntity input = new DocaposteEventHistoryEntity();

        try (MockedStatic<DocaposteEventHistoryEntityMapperToDomain> mocked =
                     Mockito.mockStatic(DocaposteEventHistoryEntityMapperToDomain.class)) {

            mocked.when(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(input))
                  .thenReturn(null);

            DocaposteEventHistory result = processor.process(input);

            assertNull(result);
            mocked.verify(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(input), times(1));
        }
    }

    @Test
    public void class_should_have_expected_annotations_and_interface() {
        assertTrue(processor instanceof ItemProcessor);
        assertNotNull(SendPaymentRequestProcessedProcessor.class
                .getAnnotation(org.springframework.stereotype.Component.class));
        assertNotNull(SendPaymentRequestProcessedProcessor.class
                .getAnnotation(lombok.extern.slf4j.Slf4j.class));
    }
}