Top. J’ai pris ton POM stream-fact-batch et je te donne ci-dessous la version complète prête à coller avec tout ce qu’il faut pour viser ≥ 80 % de couverture : JUnit 5, compat JUnit 4 (si tu as encore des tests Cucumber JUnit4), Mockito, Spring Boot Test, et JaCoCo (avec règles et exclusions pertinentes pour ignorer le “bruit” : configurations @Configuration, jobs, DTO/POJO, etc.). Le POM d’origine est bien ce module stream-fact-batch (artifactId, deps IBM COS, Spring Batch, etc.). 

Copie/colle ce POM en entier dans stream-fact-batch/pom.xml :

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <parent>
    <artifactId>stream-fact</artifactId>
    <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
    <version>1.1</version>
  </parent>

  <modelVersion>4.0.0</modelVersion>
  <artifactId>stream-fact-batch</artifactId>
  <packaging>jar</packaging>
  <name>stream-fact-batch</name>
  <description>La couche Batch héberge le code dédié à l'exécution des batchs</description>

  <!-- Versions/outils tests & couverture -->
  <properties>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>

    <maven-surefire-plugin.version>3.2.5</maven-surefire-plugin.version>
    <maven-failsafe-plugin.version>3.2.5</maven-failsafe-plugin.version>
    <jacoco.version>0.8.11</jacoco.version>

    <!-- si déjà défini par le parent, tu peux retirer cette ligne -->
    <spring-boot-maven-plugin.version>3.3.4</spring-boot-maven-plugin.version>
  </properties>

  <dependencies>
    <!-- Modules internes -->
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-domain</artifactId>
    </dependency>
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-application</artifactId>
    </dependency>
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-infra-sql</artifactId>
    </dependency>
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-infra-rest-clients</artifactId>
    </dependency>
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-infra-jms</artifactId>
    </dependency>
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-infra-smtp</artifactId>
    </dependency>
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-infra-soap-clients</artifactId>
    </dependency>
    <dependency>
      <groupId>com.bnpparibas.dsibddf.ap00420</groupId>
      <artifactId>stream-fact-infra-static-filestore</artifactId>
    </dependency>

    <!-- APIs & Batch -->
    <dependency>
      <groupId>jakarta.inject</groupId>
      <artifactId>jakarta.inject-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-batch</artifactId>
    </dependency>

    <!-- IBM COS -->
    <dependency>
      <groupId>com.ibm.cos</groupId>
      <artifactId>ibm-cos-java-sdk</artifactId>
      <version>2.14.1</version>
    </dependency>

    <!-- XML utils -->
    <dependency>
      <groupId>org.codehaus.woodstox</groupId>
      <artifactId>woodstox-core-asl</artifactId>
      <version>4.4.1</version>
    </dependency>

    <!-- Crypto -->
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpg-jdk15on</artifactId>
    </dependency>

    <!-- ===== TEST deps ===== -->
    <dependency>
      <groupId>org.springframework.batch</groupId>
      <artifactId>spring-batch-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Spring Boot Test (JUnit 5, Mockito, AssertJ, etc.) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <!-- on laisse la compat JUnit4 via Vintage plus bas -->
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Mockito Jupiter (annotations @Mock, @InjectMocks avec JUnit 5) -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Compat éventuelle JUnit 4 (utile si tu as encore cucumber-junit ou des vieux tests) -->
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Cucumber (si tu as des features; sinon tu peux supprimer) -->
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-spring</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-java</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.cucumber</groupId>
      <artifactId>cucumber-java8</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- XStream pour tests si nécessaire -->
    <dependency>
      <groupId>com.thoughtworks.xstream</groupId>
      <artifactId>xstream</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>

      <!-- Spring Boot repackage -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot-maven-plugin.version}</version>
        <configuration>
          <mainClass>com.bnpparibas.dsibddf.ap00420.streamfact.batch.main.StreamFactBatchApplication</mainClass>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Compiler -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <configuration>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
        </configuration>
      </plugin>

      <!-- Tests unitaires (JUnit 5 + compat JUnit 4) -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
        <configuration>
          <useModulePath>false</useModulePath>
          <!-- Active JUnit Platform (JUnit 5) + Vintage (JUnit 4) -->
          <includes>
            <include>**/*Test.java</include>
            <include>**/*Tests.java</include>
            <include>**/*TestCase.java</include>
          </includes>
        </configuration>
      </plugin>

      <!-- (Optionnel) Tests d’intégration nommés *IT.java -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*IT.java</include>
              </includes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Couverture JaCoCo + règle ≥ 80 % -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco.version}</version>
        <executions>
          <execution>
            <id>prepare-agent</id>
            <goals><goal>prepare-agent</goal></goals>
          </execution>
          <execution>
            <id>report</id>
            <phase>verify</phase>
            <goals><goal>report</goal></goals>
          </execution>
          <execution>
            <id>check</id>
            <phase>verify</phase>
            <goals><goal>check</goal></goals>
            <configuration>
              <rules>
                <rule>
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <counter>INSTRUCTION</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.80</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
              <!-- Exclure le bruit qui plombe la couverture mais n'a pas de logique -->
              <excludes>
                <!-- Jobs/Steps/Configs Spring Batch -->
                <exclude>**/job/**</exclude>
                <exclude>**/*Configuration*.class</exclude>
                <exclude>**/*Config.class</exclude>
                <exclude>**/listener/**</exclude>
                <exclude>**/package-info.class</exclude>

                <!-- DTO/POJO/mappers/enum purs (selon ton arbo) -->
                <exclude>**/dto/**</exclude>
                <exclude>**/pojo/**</exclude>
                <exclude>**/model/**</exclude>
                <exclude>**/mapper/**</exclude>
                <exclude>**/mappers/**</exclude>

                <!-- Classe main -->
                <exclude>**/main/**</exclude>
              </excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>

Ce que ça t’apporte

JUnit 5 + Mockito prêts pour écrire des tests unitaires ciblant la logique (processors, writers, tasklets).

Compat JUnit 4 activée (Vintage) pour faire tourner d’éventuels tests Cucumber JUnit4 existants (tu pourras migrer plus tard).

JaCoCo avec seuil 80 % et exclusions des classes “bruit” (jobs, config, DTO/POJO…).

Failsafe prêt si tu veux des tests d’intégration *IT.java.


Lancer et vérifier

# lancer les tests unitaires
mvn -q test

# générer le rapport + appliquer la règle 80 %
mvn -q verify

# ouvrir le rapport
# Windows
start target/site/jacoco/index.html
# macOS
open target/site/jacoco/index.html
# Linux
xdg-open target/site/jacoco/index.html

Ensuite (pour gagner les derniers points)

Écris 3–5 tests à fort ROI (ceux que je t’ai fournis précédemment) :

UpdateBillingSpaceToStatusClosedTaskletTest (assert + appel repo).

BillingSpaceClosureProcessorTest (appel CommandExecutorV2).

LoadDailyMeteorFileTaskletTest (cas 0 fichier + cas parsing OK avec archiveFile).

(bonus) CommonStepExecutionListenerTest pour gratter quelques %.


Tu veux que je te colle maintenant tous les fichiers de test prêts-à-mettre dans src/test/java pour ces classes ?