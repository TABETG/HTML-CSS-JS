package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.processor;

import com.bnpparibas.bddf.cqrs.command.v2.CommandExecutorV2;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.CloseBillingSpaceCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.CloseBillingSpaceRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.pojo.BillingSpaceCloseToSend;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.loanfolder.model.LoanFolder;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.model.BillingSpaceEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.model.LoanFolderEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.mapper.LoanFolderMapperToDomain;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * ✅ Version JUnit4 compatible Sonar / Jenkins
 * Couvre le scénario nominal et le scénario d'exception de process(...).
 */
@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceClosureProcessorTest {

    @InjectMocks
    private BillingSpaceClosureProcessor processor;

    @Mock
    private CommandExecutorV2 commandExecutor;

    @Test
    public void process_should_execute_command_with_mapped_loan_folder() throws Exception {
        // Arrange
        BillingSpaceEntity billingSpaceEntity = mock(BillingSpaceEntity.class);
        LoanFolderEntity loanFolderEntity = mock(LoanFolderEntity.class);
        when(billingSpaceEntity.getLoanFolder()).thenReturn(loanFolderEntity);

        LoanFolder mappedLoanFolder = mock(LoanFolder.class);
        BillingSpaceCloseToSend expected = mock(BillingSpaceCloseToSend.class);

        try (MockedStatic<LoanFolderMapperToDomain> mockedMapper =
                     Mockito.mockStatic(LoanFolderMapperToDomain.class)) {

            mockedMapper.when(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity))
                    .thenReturn(mappedLoanFolder);

            when(commandExecutor.execute(eq(CloseBillingSpaceCommand.class),
                    any(CloseBillingSpaceRequest.class)))
                    .thenReturn(expected);

            // Act
            BillingSpaceCloseToSend result = processor.process(billingSpaceEntity);

            // Assert
            assertSame("Le résultat doit être celui retourné par l'executor", expected, result);

            // Vérifie que le mapper statique a bien été appelé avec l'entité
            mockedMapper.verify(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity));

            // Capture et vérifie la requête envoyée
            ArgumentCaptor<CloseBillingSpaceRequest> reqCap =
                    ArgumentCaptor.forClass(CloseBillingSpaceRequest.class);
            verify(commandExecutor).execute(eq(CloseBillingSpaceCommand.class), reqCap.capture());
            assertNotNull(reqCap.getValue());
        }
    }

    @Test(expected = IllegalStateException.class)
    public void process_should_propagate_exception_from_executor() throws Exception {
        // Arrange
        BillingSpaceEntity billingSpaceEntity = mock(BillingSpaceEntity.class);
        LoanFolderEntity loanFolderEntity = mock(LoanFolderEntity.class);
        when(billingSpaceEntity.getLoanFolder()).thenReturn(loanFolderEntity);

        LoanFolder mappedLoanFolder = mock(LoanFolder.class);

        try (MockedStatic<LoanFolderMapperToDomain> mockedMapper =
                     Mockito.mockStatic(LoanFolderMapperToDomain.class)) {

            mockedMapper.when(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity))
                    .thenReturn(mappedLoanFolder);

            when(commandExecutor.execute(eq(CloseBillingSpaceCommand.class),
                    any(CloseBillingSpaceRequest.class)))
                    .thenThrow(new IllegalStateException("boom"));

            // Act
            processor.process(billingSpaceEntity);

            // Assert : l'exception attendue est levée
        }
    }
}