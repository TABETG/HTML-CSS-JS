package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.BillingSpaceStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.RequestTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.repository.BillingSpaceJpaRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Sort;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

/**
 * 100% coverage for BillingSpaceClosureReader:
 * - constructor injection
 * - @PostConstruct init(): repository, sort, methodName, arguments
 * - toString() path
 */
class BillingSpaceClosureReaderTest {

    @Mock
    private BillingSpaceJpaRepository repository;

    private BillingSpaceClosureReader reader;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        reader = new BillingSpaceClosureReader(repository);
    }

    @Test
    void constructor_setsRepository() throws Exception {
        assertSame(repository, findFieldValue(reader, "repository"));
    }

    @Test
    void init_configuresRepositorySortMethodAndArguments() throws Exception {
        // When
        reader.init();

        // Then
        assertSame(repository, findFieldValue(reader, "repository"));

        // ---- Vérification du tri: compatible 2 implémentations ----
        Object sortField = findAnyFieldValue(reader, "sort", "sorts");
        assertNotNull(sortField, "Le champ de tri doit être initialisé par init()");

        if (sortField instanceof Map) {
            // Anciennes versions : Map<String, Sort.Direction>
            @SuppressWarnings("unchecked")
            Map<String, Sort.Direction> sorts = (Map<String, Sort.Direction>) sortField;
            assertEquals(Sort.Direction.ASC, sorts.get("loanFolderId"));
        } else if (sortField instanceof Sort) {
            // Nouvelles versions : org.springframework.data.domain.Sort
            Sort sort = (Sort) sortField;
            // Vérifie qu'on a bien un ordre ASC sur la propriété "loanFolderId"
            Sort.Order order = sort.getOrderFor("loanFolderId");
            assertNotNull(order, "Un ordre doit exister pour loanFolderId");
            assertEquals(Sort.Direction.ASC, order.getDirection());
        } else {
            fail("Type de champ 'sort' inattendu: " + sortField.getClass());
        }

        assertEquals("findBillingSpacesToClose", findFieldValue(reader, "methodName"));

        @SuppressWarnings("unchecked")
        List<Object> args = (List<Object>) findAnyFieldValue(reader, "arguments", "args");
        assertNotNull(args);
        assertEquals(2, args.size());
        assertTrue(args.contains(BillingSpaceStatusEnum.TO_CLOSE));
        assertTrue(args.contains(RequestTypeEnum.CLOSING));
    }

    @Test
    void toString_includesClassName() {
        String s = reader.toString();
        assertNotNull(s);
        assertTrue(s.contains("BillingSpaceClosureReader"));
    }

    // ===== Helpers réflexion =====
    private Object findFieldValue(Object target, String name) throws Exception {
        Field f = findField(target.getClass(), name);
        assertNotNull(f, "Field not found: " + name);
        f.setAccessible(true);
        return f.get(target);
    }

    private Object findAnyFieldValue(Object target, String... candidates) throws Exception {
        for (String name : candidates) {
            Field f = findField(target.getClass(), name);
            if (f != null) {
                f.setAccessible(true);
                return f.get(target);
            }
        }
        // fallback éventuel : cherche un Map (anciennes impl.) puis un Sort (nouvelles)
        for (Class<?> c = target.getClass(); c != null; c = c.getSuperclass()) {
            for (Field f : c.getDeclaredFields()) {
                if (Map.class.isAssignableFrom(f.getType()) || Sort.class.isAssignableFrom(f.getType())) {
                    f.setAccessible(true);
                    return f.get(target);
                }
            }
        }
        return null;
    }

    private Field findField(Class<?> type, String name) {
        for (Class<?> c = type; c != null; c = c.getSuperclass()) {
            try {
                return c.getDeclaredField(name);
            } catch (NoSuchFieldException ignored) {}
        }
        return null;
    }
}