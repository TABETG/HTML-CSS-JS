package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.BillingSpaceStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.RequestTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.model.BillingSpaceEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.repository.BillingSpaceJpaRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.Sort;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * ✅ Test JUnit 4 – couverture 100 % BillingSpaceClosureReader
 * Compatible Jenkins / SonarQube / Jacoco.
 */
@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceClosureReaderTest {

    @Mock
    private BillingSpaceJpaRepository repository;

    private BillingSpaceClosureReader reader;

    @Before
    public void setUp() {
        reader = new BillingSpaceClosureReader(repository);
    }

    @Test
    public void constructor_should_set_repository_field() throws Exception {
        assertNotNull(reader);
        Field f = reader.getClass().getDeclaredField("repository");
        f.setAccessible(true);
        Object repoValue = f.get(reader);
        assertSame(repository, repoValue);
    }

    @Test
    public void init_should_initialize_sort_method_and_arguments() throws Exception {
        // Act
        reader.init();

        // Assert sort field
        Object sortField = getFieldValue(reader, "sort");
        assertNotNull(sortField);
        assertTrue(sortField instanceof Map);
        Map<?, ?> map = (Map<?, ?>) sortField;
        assertTrue(map.containsKey("loanFolderId"));
        assertEquals(Sort.Direction.ASC, map.get("loanFolderId"));

        // Assert repository field
        Object repo = getFieldValue(reader, "repository");
        assertSame(repository, repo);

        // Assert method name
        Object methodName = getFieldValue(reader, "methodName");
        assertEquals("findBillingSpacesToClose", methodName);

        // Assert arguments
        Object args = getFieldValue(reader, "arguments");
        assertTrue(args instanceof List);
        @SuppressWarnings("unchecked")
        List<Object> params = (List<Object>) args;
        assertEquals(2, params.size());
        assertEquals(BillingSpaceStatusEnum.TO_CLOSE, params.get(0));
        assertEquals(RequestTypeEnum.CLOSING, params.get(1));
    }

    @Test
    public void init_should_call_spring_batch_setters() {
        BillingSpaceClosureReader spyReader = spy(new BillingSpaceClosureReader(repository));
        doNothing().when(spyReader).setRepository(any());
        doNothing().when(spyReader).setSort(any());
        doNothing().when(spyReader).setMethodName(anyString());
        doNothing().when(spyReader).setArguments(anyList());

        spyReader.init();

        verify(spyReader).setRepository(repository);
        verify(spyReader).setSort(anyMap());
        verify(spyReader).setMethodName("findBillingSpacesToClose");
        verify(spyReader).setArguments(anyList());
    }

    // --- Reflection utilitaire ---
    private Object getFieldValue(Object target, String name) throws Exception {
        Field f = null;
        Class<?> clazz = target.getClass();
        while (clazz != null) {
            try {
                f = clazz.getDeclaredField(name);
                break;
            } catch (NoSuchFieldException e) {
                clazz = clazz.getSuperclass();
            }
        }
        assertNotNull("Champ introuvable: " + name, f);
        f.setAccessible(true);
        return f.get(target);
    }
}