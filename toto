package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dpo.job;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dpo.tasklet.PurgeDpoTableTasklet;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dpo.tasklet.SendMailDPOTasklet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.transaction.PlatformTransactionManager;

import java.lang.reflect.Field;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class SendMailDPOConfigurationTest {

    @Mock
    private SendMailDPOTasklet sendMailDPOTasklet;

    @Mock
    private PurgeDpoTableTasklet purgeDpoTableTasklet;

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager platformTransactionManager;

    @InjectMocks
    private SendMailDPOConfiguration configuration;

    @Before
    public void setUp() {
        assertNotNull(configuration);
    }

    @Test
    public void sendMailDPO_should_build_job_with_two_steps_and_incrementer() throws Exception {
        Step step1 = configuration.sendMailDPOStep(jobRepository, platformTransactionManager);
        Step step2 = configuration.purgeDpoTableStep(jobRepository, platformTransactionManager);

        Job job = configuration.sendMailDPO(jobRepository, step1, step2);

        assertNotNull(job);
        assertTrue(job instanceof FlowJob);
        assertEquals("sendMailDPOJob", job.getName());

        Field incField = job.getClass().getSuperclass().getDeclaredField("jobParametersIncrementer");
        incField.setAccessible(true);
        Object inc = incField.get(job);
        assertNotNull(inc);
        assertEquals("org.springframework.batch.core.launch.support.RunIdIncrementer", inc.getClass().getName());
    }

    @Test
    public void sendMailDPOStep_should_create_tasklet_step_with_tm() throws Exception {
        Step step = configuration.sendMailDPOStep(jobRepository, platformTransactionManager);

        assertNotNull(step);
        assertEquals("sendMailDPOStep", step.getName());
        assertTrue(step instanceof TaskletStep);

        Field taskletField = TaskletStep.class.getDeclaredField("tasklet");
        taskletField.setAccessible(true);
        Object tasklet = taskletField.get(step);
        assertSame(sendMailDPOTasklet, tasklet);

        Field tmField = TaskletStep.class.getDeclaredField("transactionManager");
        tmField.setAccessible(true);
        Object tm = tmField.get(step);
        assertSame(platformTransactionManager, tm);
    }

    @Test
    public void purgeDpoTableStep_should_create_tasklet_step_with_tm() throws Exception {
        Step step = configuration.purgeDpoTableStep(jobRepository, platformTransactionManager);

        assertNotNull(step);
        assertEquals("purgeDpoTableStep", step.getName());
        assertTrue(step instanceof TaskletStep);

        Field taskletField = TaskletStep.class.getDeclaredField("tasklet");
        taskletField.setAccessible(true);
        Object tasklet = taskletField.get(step);
        assertSame(purgeDpoTableTasklet, tasklet);

        Field tmField = TaskletStep.class.getDeclaredField("transactionManager");
        tmField.setAccessible(true);
        Object tm = tmField.get(step);
        assertSame(platformTransactionManager, tm);
    }

    @Test
    public void autowired_fields_should_be_injected() throws Exception {
        Field f1 = SendMailDPOConfiguration.class.getDeclaredField("sendMailDPOTasklet");
        Field f2 = SendMailDPOConfiguration.class.getDeclaredField("purgeDpoTableTasklet");
        f1.setAccessible(true);
        f2.setAccessible(true);

        assertSame(sendMailDPOTasklet, f1.get(configuration));
        assertSame(purgeDpoTableTasklet, f2.get(configuration));
    }
}