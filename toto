package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.processor;

import com.bnpparibas.bddf.cqrs.command.v2.CommandExecutorV2;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.CloseBillingSpaceCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.CloseBillingSpaceRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.pojo.BillingSpaceCloseToSend;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.model.BillingSpaceEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.mapper.LoanFolderMapperToDomain;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.loanfolder.model.LoanFolderEntity;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.loanfolder.model.LoanFolder;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * âœ… Test JUnit 4 100% coverage de BillingSpaceClosureProcessor
 * Compatible Sonar / Jenkins / Jacoco.
 */
@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceClosureProcessorTest {

    @InjectMocks
    private BillingSpaceClosureProcessor processor;

    @Mock
    private CommandExecutorV2 commandExecutor;

    @Mock
    private BillingSpaceEntity billingSpaceEntity;

    @Mock
    private LoanFolderEntity loanFolderEntity;

    @Mock
    private BillingSpaceCloseToSend expectedResponse;

    @Mock
    private LoanFolder mappedLoanFolder;

    @Before
    public void setUp() {
        when(billingSpaceEntity.getLoanFolder()).thenReturn(loanFolderEntity);
    }

    @Test
    public void process_should_execute_command_and_return_expected_result() throws Exception {
        try (MockedStatic<LoanFolderMapperToDomain> mockedMapper = Mockito.mockStatic(LoanFolderMapperToDomain.class)) {
            // Arrange
            mockedMapper.when(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity))
                    .thenReturn(mappedLoanFolder);
            when(commandExecutor.execute(eq(CloseBillingSpaceCommand.class), any(CloseBillingSpaceRequest.class)))
                    .thenReturn(expectedResponse);

            // Act
            BillingSpaceCloseToSend result = processor.process(billingSpaceEntity);

            // Assert
            assertNotNull(result);
            assertSame(expectedResponse, result);
            mockedMapper.verify(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity));
            verify(commandExecutor, times(1)).execute(eq(CloseBillingSpaceCommand.class), any(CloseBillingSpaceRequest.class));
        }
    }

    @Test(expected = IllegalStateException.class)
    public void process_should_throw_exception_when_executor_fails() throws Exception {
        try (MockedStatic<LoanFolderMapperToDomain> mockedMapper = Mockito.mockStatic(LoanFolderMapperToDomain.class)) {
            // Arrange
            mockedMapper.when(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity))
                    .thenReturn(mappedLoanFolder);
            when(commandExecutor.execute(eq(CloseBillingSpaceCommand.class), any(CloseBillingSpaceRequest.class)))
                    .thenThrow(new IllegalStateException("executor failed"));

            // Act
            processor.process(billingSpaceEntity);
        }
    }

    @Test
    public void process_should_use_loanFolder_from_entity() throws Exception {
        try (MockedStatic<LoanFolderMapperToDomain> mockedMapper = Mockito.mockStatic(LoanFolderMapperToDomain.class)) {
            mockedMapper.when(() -> LoanFolderMapperToDomain.toDomain(loanFolderEntity))
                    .thenReturn(mappedLoanFolder);
            when(commandExecutor.execute(eq(CloseBillingSpaceCommand.class), any(CloseBillingSpaceRequest.class)))
                    .thenReturn(expectedResponse);

            BillingSpaceCloseToSend result = processor.process(billingSpaceEntity);
            assertEquals(expectedResponse, result);

            ArgumentCaptor<CloseBillingSpaceRequest> requestCaptor = ArgumentCaptor.forClass(CloseBillingSpaceRequest.class);
            verify(commandExecutor).execute(eq(CloseBillingSpaceCommand.class), requestCaptor.capture());
            assertNotNull(requestCaptor.getValue());
        }
    }
}