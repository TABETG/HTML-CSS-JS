package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dpo.job;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dpo.tasklet.PurgeDpoTableTasklet;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dpo.tasklet.SendMailDPOTasklet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.transaction.PlatformTransactionManager;

import java.lang.reflect.Field;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit 4 – 100 % coverage de SendMailDPOConfiguration
 * Compatible Sonar / Jenkins / Jacoco / Java 17+
 */
@RunWith(MockitoJUnitRunner.class)
public class SendMailDPOConfigurationTest {

    @Mock
    private SendMailDPOTasklet sendMailDPOTasklet;

    @Mock
    private PurgeDpoTableTasklet purgeDpoTableTasklet;

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager platformTransactionManager;

    @InjectMocks
    private SendMailDPOConfiguration configuration;

    @Before
    public void setUp() {
        assertNotNull(configuration);
    }

    @Test
    public void sendMailDPO_should_build_job_with_two_steps() throws Exception {
        // Arrange
        Step step1 = configuration.sendMailDPOStep(jobRepository, platformTransactionManager);
        Step step2 = configuration.purgeDpoTableStep(jobRepository, platformTransactionManager);

        // Act
        Job job = configuration.sendMailDPO(jobRepository, step1, step2);

        // Assert
        assertNotNull(job);
        assertTrue(job instanceof FlowJob);
        assertEquals("sendMailDPOJob", job.getName());

        // Vérification du RunIdIncrementer via réflexion
        Field f = job.getClass().getSuperclass().getDeclaredField("jobParametersIncrementer");
        f.setAccessible(true);
        Object inc = f.get(job);
        assertNotNull(inc);
        assertEquals("org.springframework.batch.core.launch.support.RunIdIncrementer", inc.getClass().getName());
    }

    @Test
    public void sendMailDPOStep_should_create_step_with_sendMailTasklet() throws Exception {
        Step step = configuration.sendMailDPOStep(jobRepository, platformTransactionManager);

        assertNotNull(step);
        assertEquals("sendMailDPOStep", step.getName());
        assertTrue(step instanceof TaskletStep);

        // Vérifie le tasklet injecté
        Field f = TaskletStep.class.getDeclaredField("tasklet");
        f.setAccessible(true);
        Object tasklet = f.get(step);
        assertSame(sendMailDPOTasklet, tasklet);

        // Vérifie le transactionManager injecté
        Field tm = TaskletStep.class.getDeclaredField("transactionManager");
        tm.setAccessible(true);
        Object tmValue = tm.get(step);
        assertSame(platformTransactionManager, tmValue);
    }

    @Test
    public void purgeDpoTableStep_should_create_step_with_purgeTasklet() throws Exception {
        Step step = configuration.purgeDpoTableStep(jobRepository, platformTransactionManager);

        assertNotNull(step);
        assertEquals("purgeDpoTableStep", step.getName());
        assertTrue(step instanceof TaskletStep);

        Field f = TaskletStep.class.getDeclaredField("tasklet");
        f.setAccessible(true);
        Object tasklet = f.get(step);
        assertSame(purgeDpoTableTasklet, tasklet);

        Field tm = TaskletStep.class.getDeclaredField("transactionManager");
        tm.setAccessible(true);
        Object tmValue = tm.get(step);
        assertSame(platformTransactionManager, tmValue);
    }

    @Test
    public void autowired_fields_should_be_initialized_by_mockito() throws Exception {
        Field f1 = SendMailDPOConfiguration.class.getDeclaredField("sendMailDPOTasklet");
        Field f2 = SendMailDPOConfiguration.class.getDeclaredField("purgeDpoTableTasklet");
        f1.setAccessible(true);
        f2.setAccessible(true);

        assertSame(sendMailDPOTasklet, f1.get(configuration));
        assertSame(purgeDpoTableTasklet, f2.get(configuration));
    }
}