package com.bnpparibas.dsibddf.ap00420.streamfact.batch.common.tasklet;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.ProblemNatureEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.repository.DPOMailToSendRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.lang.reflect.Field;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 - Couverture 100% DeleteDpoTableImageTasklet
 * Compatible Sonar / Jenkins / Jacoco / Java 17+
 */
@RunWith(MockitoJUnitRunner.class)
public class DeleteDpoTableImageTaskletTest {

    @Mock
    private DPOMailToSendRepository repository;

    @Mock
    private StepContribution contribution;

    @Mock
    private ChunkContext chunkContext;

    @InjectMocks
    private DeleteDpoTableImageTasklet tasklet = new DeleteDpoTableImageTasklet(ProblemNatureEnum.MAIL);

    @Before
    public void injectRepository() throws Exception {
        // Injection forcée du repository simulé (évite NoSuchFieldException)
        setField(tasklet, "dpoMailToSendRepository", repository);
    }

    @Test
    public void execute_should_return_finished_and_call_repository() throws Exception {
        when(repository.deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL)).thenReturn(5);

        RepeatStatus result = tasklet.execute(contribution, chunkContext);

        assertNotNull(result);
        assertEquals(RepeatStatus.FINISHED, result);
        verify(repository, times(1))
                .deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL);
        verifyNoMoreInteractions(repository);
    }

    @Test
    public void execute_should_handle_zero_result() throws Exception {
        when(repository.deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL)).thenReturn(0);

        RepeatStatus result = tasklet.execute(contribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, result);
        verify(repository, times(1))
                .deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL);
    }

    @Test
    public void constructor_should_set_problemNature() throws Exception {
        DeleteDpoTableImageTasklet custom = new DeleteDpoTableImageTasklet(ProblemNatureEnum.ANALYSIS);
        Object fieldValue = getField(custom, "problemNature");
        assertEquals(ProblemNatureEnum.ANALYSIS, fieldValue);
    }

    // ---- Méthodes utilitaires ----

    private void setField(Object target, String fieldName, Object value) throws Exception {
        Field field = null;
        Class<?> type = target.getClass();
        while (type != null && field == null) {
            try {
                field = type.getDeclaredField(fieldName);
            } catch (NoSuchFieldException e) {
                type = type.getSuperclass();
            }
        }
        if (field == null) {
            throw new NoSuchFieldException("Champ introuvable : " + fieldName);
        }
        field.setAccessible(true);
        field.set(target, value);
    }

    private Object getField(Object target, String fieldName) throws Exception {
        Field field = null;
        Class<?> type = target.getClass();
        while (type != null && field == null) {
            try {
                field = type.getDeclaredField(fieldName);
            } catch (NoSuchFieldException e) {
                type = type.getSuperclass();
            }
        }
        if (field == null) {
            throw new NoSuchFieldException("Champ introuvable : " + fieldName);
        }
        field.setAccessible(true);
        return field.get(target);
    }
}