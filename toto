package com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.config;

import org.junit.jupiter.api.Test;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.convert.threeten.Jsr310JpaConverters;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import java.lang.reflect.Method;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class JPAConfigTest {

    @Test
    void transactionManager_returnsJpaTransactionManager() {
        JPAConfig config = new JPAConfig();
        var tm = config.transactionManager();
        assertNotNull(tm, "Le PlatformTransactionManager ne doit pas être null");
        assertTrue(tm instanceof JpaTransactionManager, "Le bean doit être un JpaTransactionManager");
    }

    @Test
    void beanMethod_hasBeanName_transactionManager_and_isPrimary() throws NoSuchMethodException {
        Method m = JPAConfig.class.getMethod("transactionManager");

        // @Bean("transactionManager")
        Bean beanAnn = m.getAnnotation(Bean.class);
        assertNotNull(beanAnn, "@Bean doit être présent");
        String[] names = beanAnn.value();
        assertNotNull(names, "Le nom du bean ne doit pas être null");
        assertTrue(names.length > 0, "Le nom du bean doit être défini");
        assertEquals("transactionManager", names[0], "Le bean doit s'appeler 'transactionManager'");

        // @Primary
        assertTrue(m.isAnnotationPresent(Primary.class), "Le bean 'transactionManager' doit être @Primary");
    }

    @Test
    void class_has_expected_annotations_and_attributes() {
        // @Configuration
        assertTrue(JPAConfig.class.isAnnotationPresent(Configuration.class), "@Configuration manquant");

        // @EnableTransactionManagement
        assertTrue(JPAConfig.class.isAnnotationPresent(EnableTransactionManagement.class), "@EnableTransactionManagement manquant");

        // @EntityScan(basePackages=..., basePackageClasses=Jsr310JpaConverters.class)
        EntityScan entityScan = JPAConfig.class.getAnnotation(EntityScan.class);
        assertNotNull(entityScan, "@EntityScan manquant");

        String[] basePackages = entityScan.basePackages();
        assertNotNull(basePackages, "basePackages ne doit pas être null");
        assertTrue(basePackages.length > 0, "basePackages doit contenir au moins un package");
        // Optionnel : vérifier que le package attendu est présent (évite les faux positifs)
        assertTrue(Arrays.asList(basePackages).contains(
                "com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities"
        ), "Le package des entités attendu doit être présent dans @EntityScan.basePackages");

        Class<?>[] basePackageClasses = entityScan.basePackageClasses();
        assertNotNull(basePackageClasses, "basePackageClasses ne doit pas être null");
        assertEquals(1, basePackageClasses.length, "basePackageClasses doit contenir exactement un élément");
        assertEquals(Jsr310JpaConverters.class, basePackageClasses[0],
                "basePackageClasses[0] doit être Jsr310JpaConverters");

        // @EnableJpaRepositories(basePackages=..., transactionManagerRef="transactionManager")
        EnableJpaRepositories repos = JPAConfig.class.getAnnotation(EnableJpaRepositories.class);
        assertNotNull(repos, "@EnableJpaRepositories manquant");

        String[] repoPkgs = repos.basePackages();
        assertNotNull(repoPkgs, "basePackages ne doit pas être null");
        assertTrue(repoPkgs.length > 0, "basePackages doit contenir au moins un package");
        assertTrue(Arrays.asList(repoPkgs).contains(
                "com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql"
        ), "Le package des repositories attendu doit être présent dans @EnableJpaRepositories.basePackages");

        assertEquals("transactionManager", repos.transactionManagerRef(),
                "transactionManagerRef doit être 'transactionManager'");
    }
}