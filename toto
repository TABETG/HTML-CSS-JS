package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.job;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.tasklet.LoadDailyMeteorFileTasklet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.transaction.PlatformTransactionManager;

import java.lang.reflect.Field;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 - Couverture 100% DailyMeteorIntegrationConfiguration
 * Compatible Sonar / Jenkins / Jacoco
 */
@RunWith(MockitoJUnitRunner.class)
public class DailyMeteorIntegrationConfigurationTest {

    @Mock
    private LoadDailyMeteorFileTasklet loadDailyMeteorFileTasklet;

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager platformTransactionManager;

    @InjectMocks
    private DailyMeteorIntegrationConfiguration configuration;

    @Before
    public void setUp() {
        assertNotNull(configuration);
    }

    @Test
    public void loadDailyMeteorFileJob_should_create_job_with_expected_name_and_incrementer() throws Exception {
        Step mockStep = new StepBuilder("testStep", jobRepository)
                .tasklet(loadDailyMeteorFileTasklet, platformTransactionManager)
                .build();

        Job job = configuration.loadDailyMeteorFileJob(jobRepository, mockStep);

        assertNotNull(job);
        assertTrue(job instanceof FlowJob);
        assertEquals("loadDailyMeteorFileJob", job.getName());

        Field incrementerField = job.getClass().getSuperclass().getDeclaredField("jobParametersIncrementer");
        incrementerField.setAccessible(true);
        Object incrementer = incrementerField.get(job);
        assertTrue(incrementer instanceof RunIdIncrementer);
    }

    @Test
    public void loadDailyMeteorFileStep_should_create_step_with_expected_tasklet() throws Exception {
        Step step = configuration.loadDailyMeteorFileStep(jobRepository);

        assertNotNull(step);
        assertTrue(step instanceof TaskletStep);
        assertEquals("loadDailyMeteorFileStep", step.getName());

        Field taskletField = TaskletStep.class.getDeclaredField("tasklet");
        taskletField.setAccessible(true);
        Object tasklet = taskletField.get(step);
        assertSame(loadDailyMeteorFileTasklet, tasklet);

        Field tmField = TaskletStep.class.getDeclaredField("transactionManager");
        tmField.setAccessible(true);
        Object tm = tmField.get(step);
        assertSame(platformTransactionManager, tm);
    }

    @Test
    public void autowired_fields_should_be_initialized_correctly() throws Exception {
        Field taskletField = DailyMeteorIntegrationConfiguration.class.getDeclaredField("loadDailyMeteorFileTasklet");
        Field tmField = DailyMeteorIntegrationConfiguration.class.getDeclaredField("platformTransactionManager");
        taskletField.setAccessible(true);
        tmField.setAccessible(true);

        Object injectedTasklet = taskletField.get(configuration);
        Object injectedTm = tmField.get(configuration);

        // Les mocks sont bien inject√©s par Mockito
        assertSame(loadDailyMeteorFileTasklet, injectedTasklet);
        assertSame(platformTransactionManager, injectedTm);
    }
}