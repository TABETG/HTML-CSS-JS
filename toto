package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.manager;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile;
import com.ibm.cloud.objectstorage.ClientConfiguration;
import com.ibm.cloud.objectstorage.auth.AWSCredentials;
import com.ibm.cloud.objectstorage.services.s3.AmazonS3;
import com.ibm.cloud.objectstorage.services.s3.model.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.core.env.Environment;

import java.io.*;
import java.net.URL;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CloudFileManagerTest {

    @InjectMocks
    private CloudFileManager manager;

    @Mock
    private AmazonS3 s3Client;

    @Mock
    private Environment env;

    private AmazonS3 s3ClientNew;

    @Before
    public void setUp() throws Exception {
        s3ClientNew = mock(AmazonS3.class);
        setPrivate(manager, "bucketName", "bucket-test");
        setPrivate(manager, "bucketNameNew", "bucket-new");
        setPrivate(manager, "objectKeyNew", "object-key");
        setPrivate(manager, "prefix", "prefix");
        setPrivate(manager, "path", "/tmp/");
        setPrivate(manager, "cosCftName", "");
        setPrivate(manager, "endpointNew", new URL("http://localhost"));
        setPrivate(manager, "location", "eu-fr2");
        setPrivate(manager, "cosIamEndpoint", "iam.endpoint");
        setPrivate(manager, "cosTimeOut", 5000);
        setPrivate(manager, "env", env);
    }

    @Test
    public void test_createClientConfig_and_createCredentials() throws Exception {
        Object config = invoke(manager, "createClientConfig");
        assertTrue(config instanceof ClientConfiguration);

        Object creds = invoke(manager, "createCredentials", String.class, "key", String.class, "id");
        assertTrue(creds instanceof AWSCredentials);
    }

    @Test
    public void test_beanAmazonS3Legacy_with_and_without_cosCftName() throws Exception {
        when(env.getProperty(anyString())).thenReturn("dummy");
        manager.beanAmazonS3Legacy();
        setPrivate(manager, "cosCftName", "prefixCft");
        manager.beanAmazonS3Legacy();
    }

    @Test
    public void test_getListOfObjects_returns_nonEmptyList() throws Exception {
        ListObjectsV2Result result = mock(ListObjectsV2Result.class);
        S3ObjectSummary summary = new S3ObjectSummary();
        summary.setKey("prefix/file1");
        when(result.getObjectSummaries()).thenReturn(Collections.singletonList(summary));
        when(s3ClientNew.listObjectsV2(anyString(), anyString())).thenReturn(result);

        java.lang.reflect.Method m = CloudFileManager.class
                .getDeclaredMethod("getListOfObjects", AmazonS3.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        List<String> list = (List<String>) m.invoke(manager, s3ClientNew);

        assertEquals(1, list.size());
        assertTrue(list.get(0).contains("file1"));
    }

    @Test
    public void test_getListOfObjects_handles_null_result() throws Exception {
        when(s3ClientNew.listObjectsV2(anyString(), anyString())).thenReturn(null);

        java.lang.reflect.Method m = CloudFileManager.class
                .getDeclaredMethod("getListOfObjects", AmazonS3.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        List<String> list = (List<String>) m.invoke(manager, s3ClientNew);

        assertTrue(list.isEmpty());
    }

    // --- helpers reflection ---
    private void setPrivate(Object instance, String field, Object value) throws Exception {
        java.lang.reflect.Field f = instance.getClass().getDeclaredField(field);
        f.setAccessible(true);
        f.set(instance, value);
    }

    private Object invoke(Object instance, String methodName, Class<?>... paramTypesAndValues) throws Exception {
        int mid = paramTypesAndValues.length / 2;
        Class<?>[] types = new Class<?>[mid];
        Object[] values = new Object[mid];
        for (int i = 0, j = 0; i < paramTypesAndValues.length; i += 2, j++) {
            types[j] = (Class<?>) paramTypesAndValues[i];
            values[j] = paramTypesAndValues[i + 1];
        }
        java.lang.reflect.Method m = instance.getClass().getDeclaredMethod(methodName, types);
        m.setAccessible(true);
        return m.invoke(instance, values);
    }
}