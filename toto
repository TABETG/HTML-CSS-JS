package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.sender.processor;

import com.bnpparibas.bddf.cqrs.command.v2.CommandExecutorV2;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.pojo.SynchroSendLoanFolder;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.sender.SendSynchroLoanFoldersCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.sender.SendSynchroLoanFoldersRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.model.DocaposteEventHistoryEntity;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BillingSpaceSendSynchroItemProcessorTest {

    @Mock
    private CommandExecutorV2 commandExecutor;

    @InjectMocks
    private BillingSpaceSendSynchroItemProcessor processor;

    @Test
    void process_returnsValueFromCommandExecutor_and_callsWithProperTypes() throws Exception {
        // Arrange
        DocaposteEventHistoryEntity entity = mock(DocaposteEventHistoryEntity.class);
        when(entity.getLoanFolderId()).thenReturn("LF-123");

        SynchroSendLoanFolder expected = mock(SynchroSendLoanFolder.class);

        // Stub: on ne s’intéresse pas au contenu exact de la request ici;
        // l’objectif est de couvrir la méthode et de vérifier l’appel au bon exécuteur.
        when(commandExecutor.execute(
                ArgumentMatchers.eq(SendSynchroLoanFoldersCommand.class),
                ArgumentMatchers.any(SendSynchroLoanFoldersRequest.class)
        )).thenReturn(expected);

        // Act
        SynchroSendLoanFolder result = processor.process(entity);

        // Assert
        assertSame(expected, result, "Le processor doit renvoyer exactement la valeur du CommandExecutor");
        verify(commandExecutor, times(1)).execute(
                ArgumentMatchers.eq(SendSynchroLoanFoldersCommand.class),
                ArgumentMatchers.any(SendSynchroLoanFoldersRequest.class)
        );
        verify(entity, atLeastOnce()).getLoanFolderId(); // couvre l'accès ID
        verifyNoMoreInteractions(commandExecutor);
    }

    @Test
    void process_propagatesExceptionFromCommandExecutor() {
        // Arrange
        DocaposteEventHistoryEntity entity = mock(DocaposteEventHistoryEntity.class);
        when(entity.getLoanFolderId()).thenReturn("LF-999");

        when(commandExecutor.execute(
                ArgumentMatchers.eq(SendSynchroLoanFoldersCommand.class),
                ArgumentMatchers.any(SendSynchroLoanFoldersRequest.class)
        )).thenThrow(new RuntimeException("boom"));

        // Act + Assert
        RuntimeException ex = assertThrows(RuntimeException.class, () -> processor.process(entity));
        assertEquals("boom", ex.getMessage());
    }
}