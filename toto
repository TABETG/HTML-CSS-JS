package com.bnpparibas.dsibddf.ap00420.streamfact.batch.common.tasklet;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.ProblemNatureEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.repository.DPOMailToSendRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 - Couverture 100% DeleteDpoTableImageTasklet
 * Compatible Sonar / Jenkins / Jacoco / Java 17+
 */
@RunWith(MockitoJUnitRunner.class)
public class DeleteDpoTableImageTaskletTest {

    @Mock
    private DPOMailToSendRepository dpoMailToSendRepository;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    private DeleteDpoTableImageTasklet tasklet;

    @Before
    public void setUp() {
        tasklet = new DeleteDpoTableImageTasklet(ProblemNatureEnum.MAIL);
        // injection manuelle du mock car @Autowired non exécuté dans un test unitaire pur
        setPrivateField(tasklet, "dpoMailToSendRepository", dpoMailToSendRepository);
    }

    @Test
    public void execute_should_call_repository_and_return_finished() throws Exception {
        when(dpoMailToSendRepository.deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL))
                .thenReturn(3);

        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

        assertNotNull(status);
        assertEquals(RepeatStatus.FINISHED, status);
        verify(dpoMailToSendRepository, times(1))
                .deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL);
        verifyNoMoreInteractions(dpoMailToSendRepository);
    }

    @Test
    public void constructor_should_assign_problemNature_field() throws Exception {
        DeleteDpoTableImageTasklet custom = new DeleteDpoTableImageTasklet(ProblemNatureEnum.ANALYSIS);
        Object fieldValue = getPrivateField(custom, "problemNature");
        assertEquals(ProblemNatureEnum.ANALYSIS, fieldValue);
    }

    @Test
    public void execute_should_handle_zero_deleted_without_exception() throws Exception {
        when(dpoMailToSendRepository.deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL))
                .thenReturn(0);

        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, status);
        verify(dpoMailToSendRepository, times(1))
                .deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.MAIL);
    }

    /** Utilitaire : injection de champ privé via réflexion */
    private void setPrivateField(Object instance, String fieldName, Object value) {
        try {
            java.lang.reflect.Field field = instance.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(instance, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /** Utilitaire : lecture de champ privé via réflexion */
    private Object getPrivateField(Object instance, String fieldName) {
        try {
            java.lang.reflect.Field field = instance.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            return field.get(instance);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}