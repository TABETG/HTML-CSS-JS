package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.manager;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile;
import org.junit.Test;

import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.List;

import static org.junit.Assert.*;

/**
 * Test JUnit 4 â€“ 100% coverage pour l'interface FileManager
 * Compatible Jenkins / Sonar / Jacoco / Java 17+
 */
public class FileManagerTest {

    @Test
    public void interface_should_be_public_and_not_abstract_class() {
        Class<?> clazz = FileManager.class;
        assertTrue(Modifier.isPublic(clazz.getModifiers()));
        assertTrue(clazz.isInterface());
    }

    @Test
    public void should_have_getFiles_method_with_correct_signature() throws Exception {
        Method m = FileManager.class.getDeclaredMethod("getFiles");
        assertEquals(List.class, m.getReturnType());
        assertTrue(m.getGenericReturnType().getTypeName().contains("MeteorFile"));
        assertTrue(Modifier.isPublic(m.getModifiers()));
        assertTrue(hasExceptionDeclared(m, IOException.class));
    }

    @Test
    public void should_have_archiveFile_with_string_signature() throws Exception {
        Method m = FileManager.class.getDeclaredMethod("archiveFile", String.class);
        assertEquals(void.class, m.getReturnType());
        assertTrue(Modifier.isPublic(m.getModifiers()));
    }

    @Test
    public void should_have_archiveFile_with_meteorfile_signature() throws Exception {
        Method m = FileManager.class.getDeclaredMethod("archiveFile",
                com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile.class);
        assertEquals(void.class, m.getReturnType());
        assertTrue(Modifier.isPublic(m.getModifiers()));
    }

    @Test
    public void should_declare_exactly_three_methods() {
        Method[] methods = FileManager.class.getDeclaredMethods();
        assertEquals(3, methods.length);
    }

    private boolean hasExceptionDeclared(Method m, Class<?> exceptionType) {
        for (Class<?> ex : m.getExceptionTypes()) {
            if (ex.equals(exceptionType)) {
                return true;
            }
        }
        return false;
    }
}