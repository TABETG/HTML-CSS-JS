package com.bnpparibas.dsibddf.ap10530.incident.domain.model.enums;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Enumération représentant le type de requête ou la source d'accès utilisée
 * lors des appels de recherche d'incidents.
 *
 * Les codes sont normalisés selon les valeurs suivantes :
 * <ul>
 *   <li><b>1</b> → BNP_ONLY : la requête concerne uniquement les données internes BNP Paribas</li>
 *   <li><b>2</b> → BDF_ONLY : la requête concerne uniquement les données Banque de France</li>
 *   <li><b>3</b> → BOTH_BNP_BDF : la requête combine les deux sources</li>
 * </ul>
 */
public enum RequestTypeEnum {

    // Type de requête : uniquement BNP
    BNP_ONLY("1"),

    // Type de requête : uniquement Banque de France
    BDF_ONLY("2"),

    // Type de requête : à la fois BNP et Banque de France
    BOTH_BNP_BDF("3");

    // Valeur réelle associée à l'enum (utilisée dans les échanges JSON et les logs)
    private final String value;

    /**
     * Constructeur privé pour initialiser la valeur associée.
     */
    RequestTypeEnum(final String value) {
        this.value = value;
    }

    /**
     * Méthode utilisée par Jackson pour désérialiser la valeur depuis une chaîne JSON.
     * Si la valeur reçue correspond à une des valeurs définies ("1", "2" ou "3"),
     * elle renvoie l'enum correspondante ; sinon, retourne <code>null</code>.
     */
    @JsonCreator
    public static RequestTypeEnum fromValue(final String text) {
        for (final RequestTypeEnum b : RequestTypeEnum.values()) {
            if (String.valueOf(b.value).equals(text)) {
                return b;
            }
        }
        return null; // Valeur non reconnue
    }

    /**
     * Méthode utilisée par Jackson pour sérialiser l'enum vers sa valeur JSON.
     * @return la valeur sous forme de chaîne ("1", "2" ou "3")
     */
    @Override
    @JsonValue
    public String toString() {
        return String.valueOf(value);
    }
}
