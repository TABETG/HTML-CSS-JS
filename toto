package com.bnpparibas.dsibddf.ap00420.streamfact.batch.common.tasklet;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.ProblemNatureEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.repository.DPOMailToSendRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.lang.reflect.Field;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 – Couverture 100 % DeleteDpoTableImageTasklet
 * Compatible Sonar / Jenkins / Jacoco / Java 17+
 */
@RunWith(MockitoJUnitRunner.class)
public class DeleteDpoTableImageTaskletTest {

    @Mock
    private DPOMailToSendRepository dpoMailToSendRepository;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    private DeleteDpoTableImageTasklet tasklet;

    @Before
    public void setUp() throws Exception {
        // Remplace ici ProblemNatureEnum.TECHNICAL par une valeur réelle existante dans ton enum
        tasklet = new DeleteDpoTableImageTasklet(ProblemNatureEnum.TECHNICAL);
        injectPrivateField(tasklet, "dpoMailToSendRepository", dpoMailToSendRepository);
    }

    @Test
    public void execute_should_call_repository_and_return_finished() throws Exception {
        when(dpoMailToSendRepository.deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.TECHNICAL))
                .thenReturn(5);

        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

        assertNotNull(status);
        assertEquals(RepeatStatus.FINISHED, status);
        verify(dpoMailToSendRepository, times(1))
                .deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.TECHNICAL);
        verifyNoMoreInteractions(dpoMailToSendRepository);
    }

    @Test
    public void execute_should_handle_zero_deletion() throws Exception {
        when(dpoMailToSendRepository.deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.TECHNICAL))
                .thenReturn(0);

        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, status);
        verify(dpoMailToSendRepository, times(1))
                .deleteWithSendFalseAndProblemeNature2(ProblemNatureEnum.TECHNICAL);
        verifyNoMoreInteractions(dpoMailToSendRepository);
    }

    @Test
    public void constructor_should_initialize_problemNature_field() throws Exception {
        DeleteDpoTableImageTasklet another = new DeleteDpoTableImageTasklet(ProblemNatureEnum.ANALYSIS);
        Object fieldValue = getPrivateField(another, "problemNature");
        assertEquals(ProblemNatureEnum.ANALYSIS, fieldValue);
    }

    // ========= utilitaires réflexion =========

    private void injectPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = null;
        Class<?> clazz = target.getClass();
        while (clazz != null && field == null) {
            try {
                field = clazz.getDeclaredField(fieldName);
            } catch (NoSuchFieldException e) {
                clazz = clazz.getSuperclass();
            }
        }
        if (field == null) {
            throw new NoSuchFieldException("Champ introuvable : " + fieldName);
        }
        field.setAccessible(true);
        field.set(target, value);
    }

    private Object getPrivateField(Object target, String fieldName) throws Exception {
        Field field = null;
        Class<?> clazz = target.getClass();
        while (clazz != null && field == null) {
            try {
                field = clazz.getDeclaredField(fieldName);
            } catch (NoSuchFieldException e) {
                clazz = clazz.getSuperclass();
            }
        }
        if (field == null) {
            throw new NoSuchFieldException("Champ introuvable : " + fieldName);
        }
        field.setAccessible(true);
        return field.get(target);
    }
}