package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.job;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.tasklet.LoadDailyMeteorFileTasklet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.transaction.PlatformTransactionManager;

import java.lang.reflect.Field;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 - Couverture 100% de DailyMeteorIntegrationConfiguration
 * Compatible Sonar / Jenkins / Jacoco / Java 17+
 */
@RunWith(MockitoJUnitRunner.class)
public class DailyMeteorIntegrationConfigurationTest {

    @Mock
    private LoadDailyMeteorFileTasklet loadDailyMeteorFileTasklet;

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager platformTransactionManager;

    @InjectMocks
    private DailyMeteorIntegrationConfiguration configuration;

    @Before
    public void setUp() {
        assertNotNull(configuration);
    }

    @Test
    public void loadDailyMeteorFileJob_should_create_job_with_expected_properties() throws Exception {
        Step step = configuration.loadDailyMeteorFileStep(jobRepository);
        Job job = configuration.loadDailyMeteorFileJob(jobRepository, step);

        assertNotNull(job);
        assertTrue(job instanceof FlowJob);
        assertEquals("loadDailyMeteorFileJob", job.getName());

        // Vérifie la présence du RunIdIncrementer
        Field incField = job.getClass().getSuperclass().getDeclaredField("jobParametersIncrementer");
        incField.setAccessible(true);
        Object incrementer = incField.get(job);
        assertNotNull(incrementer);
        assertEquals("org.springframework.batch.core.launch.support.RunIdIncrementer", incrementer.getClass().getName());
    }

    @Test
    public void loadDailyMeteorFileStep_should_create_step_with_tasklet_and_transactionManager() throws Exception {
        Step step = configuration.loadDailyMeteorFileStep(jobRepository);

        assertNotNull(step);
        assertTrue(step instanceof TaskletStep);
        assertEquals("loadDailyMeteorFileStep", step.getName());

        // Vérifie que le tasklet et le TM sont bien affectés
        Field taskletField = TaskletStep.class.getDeclaredField("tasklet");
        taskletField.setAccessible(true);
        Object tasklet = taskletField.get(step);
        assertSame(loadDailyMeteorFileTasklet, tasklet);

        Field tmField = TaskletStep.class.getDeclaredField("transactionManager");
        tmField.setAccessible(true);
        Object tm = tmField.get(step);
        assertSame(platformTransactionManager, tm);
    }

    @Test
    public void autowired_fields_should_be_injected_correctly() throws Exception {
        Field taskletField = DailyMeteorIntegrationConfiguration.class.getDeclaredField("loadDailyMeteorFileTasklet");
        Field tmField = DailyMeteorIntegrationConfiguration.class.getDeclaredField("platformTransactionManager");

        taskletField.setAccessible(true);
        tmField.setAccessible(true);

        Object injectedTasklet = taskletField.get(configuration);
        Object injectedTm = tmField.get(configuration);

        assertSame(loadDailyMeteorFileTasklet, injectedTasklet);
        assertSame(platformTransactionManager, injectedTm);
    }

    @Test
    public void constructor_and_methods_should_not_throw_exception() throws Exception {
        // Vérifie que la configuration supporte un nouvel objet proprement
        DailyMeteorIntegrationConfiguration config2 = new DailyMeteorIntegrationConfiguration();

        // Injection manuelle pour vérif globale
        Field taskletField = DailyMeteorIntegrationConfiguration.class.getDeclaredField("loadDailyMeteorFileTasklet");
        Field tmField = DailyMeteorIntegrationConfiguration.class.getDeclaredField("platformTransactionManager");
        taskletField.setAccessible(true);
        tmField.setAccessible(true);
        taskletField.set(config2, loadDailyMeteorFileTasklet);
        tmField.set(config2, platformTransactionManager);

        Step step = config2.loadDailyMeteorFileStep(jobRepository);
        Job job = config2.loadDailyMeteorFileJob(jobRepository, step);

        assertNotNull(job);
        assertNotNull(step);
        assertEquals("loadDailyMeteorFileJob", job.getName());
        assertEquals("loadDailyMeteorFileStep", step.getName());
    }
}