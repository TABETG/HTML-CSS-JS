Voici la r√©ponse courte et op√©rationnelle : tout ce qui matche sonar.exclusions dans ton POM ne comptera pas dans Sonar (ni bugs/code smells, ni couverture). Dans ton parent POM, la propri√©t√© est bien pr√©sente, avec une longue liste de patterns. 

Ce qui ne sera pas pris en compte par Sonar (√† √©viter si tu veux faire monter la couverture)

Module stream-fact-exposition : quasiment toute la couche d‚Äôexpo est exclue
(exposition/*.java, exposition/rest/**, exposition/jms/**, DTO, mappers, config, errors, etc., et m√™me exposition/api/ZosConnectTestResource.java). 
(Modules list√©s dans le parent POM : stream-fact-exposition fait bien partie du build.) 

Infra REST clients : de larges pans sont exclus, notamment
infrastructure/rest/gdn/**, infrastructure/rest/http/config/*, infrastructure/rest/alias/**, r√©ponses Vision360/alias, .../config/sslconfig/*, etc.

Infra SOAP clients : infrastructure/soap/config/*, infrastructure/soap/sharepoint/* et les stubs com/microsoft/schemas/sharepoint/soap/*. 

Infra JMS (parties pr√©cises) : infrastructure/jms/config/*, infrastructure/jms/tracing/* et, dans clientnotif, plusieurs classes cibl√©es (NotificationParameters, MessageNotificationBuilder, LmMessageConverter, ClientMessagePostProcessor, ClientNotificationRepositoryMockImpl). 

Domaine (grande partie) :
domain/entity/**, domain/commons/*, domain/mapper/**, domain/errors/*, domain/logging/*, domain/engines/*, et les validateurs domain/service/**/validator/*.java. Certains mod√®les de repository sont aussi exclus (ex. docaposte).

Batch ‚Äì configuration & certains readers :
tous les *Config.java, JobConfiguration*.java, batch/**/*Configuration.java + plusieurs readers cibl√©s (ex. batch/maestro/s3cos/*Reader.java, batch/paymentrequestpaid/reader/*Reader.java, batch/sendtobmd/reader/*Reader.java).


> üëâ En r√©sum√©, des pans entiers de exposition/**, beaucoup de infrastructure/rest|soap/**, de domain/** (entit√©s/mappers/engines/validators), ainsi que la config Spring & une partie des readers Batch sont exclus. 



O√π investir tes tests pour que la couverture Sonar monte vraiment

stream-fact-application (commands/handlers/services applicatifs) : non list√© dans les exclusions ‚Üí bon candidat. (Parent POM confirme la pr√©sence du module.) 

Batch hors exclusions : processors, writers, tasklets (les exclusions visent surtout la config & certains readers). Exemples concrets pr√©sents dans le code : PaymentRequestPaidItemProcessor, ItemsToPurgeWriter, SendToBMDSendCFTTasklet ‚Äî ce type de classes n‚Äôappara√Æt pas dans la liste d‚Äôexclusion.

Infra SQL (repositories/mappers c√¥t√© infrastructure/sql/** non explicitement exclus) : bon levier si ta logique passe par l√†. (Les exclusions visent surtout REST/SOAP/JMS config et certains mocks.) 

Domaine hors paquets exclus : services m√©tiers (hors entity/, mapper/, engines/, service/**/validator/) restent pertinents pour la couverture. 


D√©tail important

Dans ton POM, c‚Äôest sonar.exclusions (global) et non sonar.coverage.exclusions : les fichiers list√©s sont totalement exclus de l‚Äôanalyse Sonar, pas seulement de la couverture. Tester ces classes ne changera donc pas la m√©trique de couverture Sonar. 

Si tu veux, je peux te fournir une checklist cibl√©e (classes prioritaires par module) en partant de ce tri, pour maximiser le gain de couverture utile.