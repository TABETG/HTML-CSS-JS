package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.sender.writer;

import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.pojo.SynchroSendLoanFolder;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.RequestTypeStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.model.DocaposteEventHistory;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.repository.DocaposteEventHistoryRepository;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.repository.docaposte.DocaposteRepository;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.repository.docaposte.model.DocaposteResponse;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.repository.docaposte.model.DossierBox;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.quality.Strictness;
import org.springframework.batch.item.Chunk;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT) // évite UnnecessaryStubbingException
class BillingSpaceSendSynchroItemWriterTest {

    @Mock
    private DocaposteRepository docaposteRepository;

    @Mock
    private DocaposteEventHistoryRepository docaposteEventHistoryRepository;

    @Captor
    private ArgumentCaptor<DocaposteEventHistory> historyCaptor;

    private BillingSpaceSendSynchroItemWriter writer;

    @BeforeEach
    void setUp() {
        writer = new BillingSpaceSendSynchroItemWriter();
        // injecte les champs @Autowired privés
        ReflectionTestUtils.setField(writer, "docaposteRepository", docaposteRepository);
        ReflectionTestUtils.setField(writer, "docaposteEventHistoryRepository", docaposteEventHistoryRepository);
    }

    @Test
    void write_savesTwoHistories_whenResponsesExist() {
        // Given
        DossierBox dossierBox1 = mock(DossierBox.class);
        DossierBox dossierBox2 = mock(DossierBox.class);
        when(dossierBox1.toJsonString()).thenReturn("dossier1");
        when(dossierBox2.toJsonString()).thenReturn("dossier2");

        SynchroSendLoanFolder f1 = createFolder(dossierBox1, new DocaposteEventHistory());
        SynchroSendLoanFolder f2 = createFolder(dossierBox2, new DocaposteEventHistory());
        Chunk<SynchroSendLoanFolder> chunk = new Chunk<>(Arrays.asList(f1, f2));

        List<DocaposteResponse> responses = Arrays.asList(
                responseWithGroupId("groupId1"),
                responseWithGroupId("groupId2")
        );
        when(docaposteRepository.sendDossierBox(anyList())).thenReturn(responses);

        // When
        writer.write(chunk);

        // Then
        verify(docaposteRepository).sendDossierBox(anyList());
        verify(docaposteEventHistoryRepository, times(2)).save(historyCaptor.capture());
        List<DocaposteEventHistory> saved = historyCaptor.getAllValues();

        assertThat(saved).hasSize(2);
        assertThat(saved.get(0).getStatus()).isEqualTo(RequestTypeStatusEnum.UPDATE_SENT);
        assertThat(saved.get(0).getRequestId()).isEqualTo("groupId1");
        assertThat(saved.get(1).getStatus()).isEqualTo(RequestTypeStatusEnum.UPDATE_SENT);
        assertThat(saved.get(1).getRequestId()).isEqualTo("groupId2");
    }

    @Test
    void write_doesNotSaveHistory_whenResponsesEmpty() {
        // Given
        DossierBox dossierBox = mock(DossierBox.class);
        when(dossierBox.toJsonString()).thenReturn("dossier");
        SynchroSendLoanFolder folder = createFolder(dossierBox, new DocaposteEventHistory());
        Chunk<SynchroSendLoanFolder> chunk = new Chunk<>(Collections.singletonList(folder));

        when(docaposteRepository.sendDossierBox(anyList())).thenReturn(Collections.emptyList());

        // When
        writer.write(chunk);

        // Then
        verify(docaposteRepository).sendDossierBox(anyList());
        verify(docaposteEventHistoryRepository, never()).save(any(DocaposteEventHistory.class));
    }

    @Test
    void write_savesHistory_withSingleItem() {
        // Given
        DossierBox dossierBox = mock(DossierBox.class);
        when(dossierBox.toJsonString()).thenReturn("singleDossier");
        SynchroSendLoanFolder folder = createFolder(dossierBox, new DocaposteEventHistory());
        Chunk<SynchroSendLoanFolder> chunk = new Chunk<>(Collections.singletonList(folder));

        when(docaposteRepository.sendDossierBox(anyList()))
                .thenReturn(Collections.singletonList(responseWithGroupId("singleGroupId")));

        // When
        writer.write(chunk);

        // Then
        verify(docaposteRepository).sendDossierBox(anyList());
        verify(docaposteEventHistoryRepository).save(historyCaptor.capture());
        DocaposteEventHistory saved = historyCaptor.getValue();
        assertThat(saved.getStatus()).isEqualTo(RequestTypeStatusEnum.UPDATE_SENT);
        assertThat(saved.getRequestId()).isEqualTo("singleGroupId");
    }

    @Test
    void write_doesNothing_withEmptyChunk() {
        // Given
        Chunk<SynchroSendLoanFolder> empty = new Chunk<>(Collections.emptyList());

        // When
        writer.write(empty);

        // Then
        verifyNoInteractions(docaposteRepository);
        verifyNoInteractions(docaposteEventHistoryRepository);
    }

    @Test
    void write_propagatesException_fromRepository_andDoesNotSaveHistory() {
        // Given
        DossierBox dossierBox = mock(DossierBox.class);
        when(dossierBox.toJsonString()).thenReturn("errorDossier");
        SynchroSendLoanFolder folder = createFolder(dossierBox, new DocaposteEventHistory());
        Chunk<SynchroSendLoanFolder> chunk = new Chunk<>(Collections.singletonList(folder));

        when(docaposteRepository.sendDossierBox(anyList()))
                .thenThrow(new RuntimeException("Simulated exception"));

        // When / Then
        assertThatThrownBy(() -> writer.write(chunk))
                .isInstanceOf(RuntimeException.class)
                .hasMessageContaining("Simulated exception");

        verify(docaposteRepository).sendDossierBox(anyList());
        verifyNoInteractions(docaposteEventHistoryRepository);
    }

    // ===== Helpers =====

    private SynchroSendLoanFolder createFolder(DossierBox dossierBox, DocaposteEventHistory history) {
        SynchroSendLoanFolder folder = mock(SynchroSendLoanFolder.class);
        // lenient: évite l’exception si un test ne consomme pas tous les stubs
        lenient().when(folder.getDossierBox()).thenReturn(dossierBox);
        lenient().when(folder.getDocaposteEventHistory()).thenReturn(history);
        return folder;
    }

    private DocaposteResponse responseWithGroupId(String id) {
        DocaposteResponse r = mock(DocaposteResponse.class);
        when(r.getGroupId()).thenReturn(id);
        return r;
    }
}