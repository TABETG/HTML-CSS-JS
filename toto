package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.BillingSpaceStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.repository.BillingSpaceJpaRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.Sort;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.verifyNoInteractions;

@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceSynchroItemReaderTest {

    @Mock
    private BillingSpaceJpaRepository repository;

    @InjectMocks
    private BillingSpaceSynchroItemReader reader;

    @Before
    public void setUp() {
        // rien à initialiser
    }

    @Test
    public void init_should_initialize_internal_fields_correctly() throws Exception {
        reader.init();

        assertNotNull(reader);

        // Vérifie le champ repository
        Field repoField = BillingSpaceSynchroItemReader.class.getSuperclass().getDeclaredField("repository");
        repoField.setAccessible(true);
        Object repoValue = repoField.get(reader);
        assertSame(repository, repoValue);

        // Vérifie le champ methodName
        Field methodField = BillingSpaceSynchroItemReader.class.getSuperclass().getDeclaredField("methodName");
        methodField.setAccessible(true);
        Object methodValue = methodField.get(reader);
        assertEquals("findByBillingSpaceStatus", methodValue);

        // Vérifie le champ sorts
        Field sortField = BillingSpaceSynchroItemReader.class.getSuperclass().getDeclaredField("sort");
        sortField.setAccessible(true);
        @SuppressWarnings("unchecked")
        Map<String, Sort.Direction> sortMap = (Map<String, Sort.Direction>) sortField.get(reader);
        assertNotNull(sortMap);
        assertTrue(sortMap.containsKey("loanFolderId"));
        assertEquals(Sort.Direction.ASC, sortMap.get("loanFolderId"));

        // Vérifie les arguments
        Field argsField = BillingSpaceSynchroItemReader.class.getSuperclass().getDeclaredField("arguments");
        argsField.setAccessible(true);
        @SuppressWarnings("unchecked")
        List<Object> args = (List<Object>) argsField.get(reader);
        assertNotNull(args);
        assertEquals(1, args.size());
        assertEquals(BillingSpaceStatusEnum.CREATED, args.get(0));

        verifyNoInteractions(repository);
    }

    @Test
    public void constructor_should_assign_repository_field() throws Exception {
        BillingSpaceJpaRepository mockRepo = org.mockito.Mockito.mock(BillingSpaceJpaRepository.class);
        BillingSpaceSynchroItemReader customReader = new BillingSpaceSynchroItemReader(mockRepo);

        Field field = BillingSpaceSynchroItemReader.class.getDeclaredField("repository");
        field.setAccessible(true);
        Object value = field.get(customReader);
        assertSame(mockRepo, value);
    }
}