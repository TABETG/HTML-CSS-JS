package com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.config;

import org.junit.jupiter.api.Test;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.jpa.convert.threeten.Jsr310JpaConverters;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.boot.autoconfigure.domain.EntityScan;

import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.*;

class JPAConfigTest {

    @Test
    void transactionManager_returnsJpaTransactionManager() {
        // Arrange
        JPAConfig config = new JPAConfig();

        // Act
        var tm = config.transactionManager();

        // Assert
        assertNotNull(tm, "Le PlatformTransactionManager ne doit pas être null");
        assertTrue(tm instanceof JpaTransactionManager, "Le bean doit être un JpaTransactionManager");
    }

    @Test
    void beanMethod_hasBeanName_transactionManager_and_isPrimary() throws NoSuchMethodException {
        Method m = JPAConfig.class.getMethod("transactionManager");

        // @Bean("transactionManager")
        Bean beanAnn = m.getAnnotation(Bean.class);
        assertNotNull(beanAnn, "@Bean doit être présent");
        String[] names = beanAnn.value();
        assertNotNull(names, "Le nom du bean ne doit pas être null");
        assertTrue(names.length > 0, "Le nom du bean doit être défini");
        assertEquals("transactionManager", names[0], "Le bean doit s'appeler 'transactionManager'");

        // @Primary
        assertTrue(m.isAnnotationPresent(Primary.class), "Le bean 'transactionManager' doit être @Primary");
    }

    @Test
    void class_has_expected_annotations_and_attributes() {
        // @Configuration
        assertTrue(JPAConfig.class.isAnnotationPresent(Configuration.class), "@Configuration manquant");

        // @EnableTransactionManagement
        assertTrue(JPAConfig.class.isAnnotationPresent(EnableTransactionManagement.class), "@EnableTransactionManagement manquant");

        // @EntityScan(basePackages=..., basePackageClasses=Jsr310JpaConverters.class)
        EntityScan entityScan = JPAConfig.class.getAnnotation(EntityScan.class);
        assertNotNull(entityScan, "@EntityScan manquant");
        assertNotNull(entityScan.basePackages(), "basePackages ne doit pas être null");
        assertTrue(entityScan.basePackages().length > 0, "basePackages doit contenir au moins un package");
        assertEquals(Jsr310JpaConverters.class, entityScan.basePackageClasses(), "basePackageClasses doit contenir Jsr310JpaConverters");

        // @EnableJpaRepositories(basePackages=..., transactionManagerRef="transactionManager")
        EnableJpaRepositories repos = JPAConfig.class.getAnnotation(EnableJpaRepositories.class);
        assertNotNull(repos, "@EnableJpaRepositories manquant");
        assertNotNull(repos.basePackages(), "basePackages ne doit pas être null");
        assertTrue(repos.basePackages().length > 0, "basePackages doit contenir au moins un package");
        assertEquals("transactionManager", repos.transactionManagerRef(), "transactionManagerRef doit être 'transactionManager'");
    }
}