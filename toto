package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.BillingSpaceStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.repository.BillingSpaceJpaRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.Sort;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * JUnit4 - Couverture 100 % BillingSpaceSynchroItemReader
 * Compatible Sonar / Jenkins / Jacoco
 */
@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceSynchroItemReaderTest {

    @Mock
    private BillingSpaceJpaRepository repository;

    @InjectMocks
    private BillingSpaceSynchroItemReader reader;

    @Before
    public void setUp() {
        assertNotNull(reader);
    }

    @Test
    public void init_should_initialize_fields_correctly() throws Exception {
        reader.init();

        // repository field
        Object repoValue = getDeclaredFieldValue(reader, "repository");
        assertSame(repository, repoValue);

        // methodName field
        Object methodName = getDeclaredFieldValue(reader, "methodName");
        assertEquals("findByBillingSpaceStatus", methodName);

        // arguments field
        @SuppressWarnings("unchecked")
        List<Object> args = (List<Object>) getDeclaredFieldValue(reader, "arguments");
        assertNotNull(args);
        assertEquals(1, args.size());
        assertEquals(BillingSpaceStatusEnum.CREATED, args.get(0));

        // sort field
        @SuppressWarnings("unchecked")
        Map<String, Sort.Direction> sortMap = (Map<String, Sort.Direction>) getDeclaredFieldValue(reader, "sort");
        assertNotNull(sortMap);
        assertTrue(sortMap.containsKey("loanFolderId"));
        assertEquals(Sort.Direction.ASC, sortMap.get("loanFolderId"));

        verifyNoInteractions(repository);
    }

    @Test
    public void constructor_should_assign_repository_and_init_should_run() throws Exception {
        BillingSpaceJpaRepository mockRepo = mock(BillingSpaceJpaRepository.class);
        BillingSpaceSynchroItemReader customReader = new BillingSpaceSynchroItemReader(mockRepo);

        Object repoFieldValue = getDeclaredFieldValue(customReader, "repository");
        assertSame(mockRepo, repoFieldValue);

        customReader.init();
        Object methodName = getDeclaredFieldValue(customReader, "methodName");
        assertEquals("findByBillingSpaceStatus", methodName);
        verifyNoInteractions(mockRepo);
    }

    @Test
    public void init_should_be_idempotent_when_called_twice() throws Exception {
        reader.init();
        reader.init();
        Object args = getDeclaredFieldValue(reader, "arguments");
        assertNotNull(args);
        verifyNoInteractions(repository);
    }

    private Object getDeclaredFieldValue(Object instance, String fieldName) throws Exception {
        Class<?> clazz = instance.getClass();
        while (clazz != null) {
            try {
                Field field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
                return field.get(instance);
            } catch (NoSuchFieldException e) {
                clazz = clazz.getSuperclass(); // remonte la hi√©rarchie
            }
        }
        throw new NoSuchFieldException("Field not found: " + fieldName);
    }
}