package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.sender.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.RequestTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.RequestTypeStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.model.DocaposteEventHistoryEntity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import org.hibernate.SessionFactory;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.database.JpaCursorItemReader;

import java.lang.reflect.Field;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 100% coverage pour EventHistorySynchroItemReaderConfig.
 * Compatible Spring Batch 4, 5, 6.
 */
@RunWith(MockitoJUnitRunner.class)
public class EventHistorySynchroItemReaderConfigTest {

    @InjectMocks
    private EventHistorySynchroItemReaderConfig config;

    @Mock
    private EntityManager entityManager;

    @Mock
    private EntityManagerFactory entityManagerFactory;

    @Mock
    private SessionFactory sessionFactory;

    @Before
    public void setUp() {
        when(entityManager.getEntityManagerFactory()).thenReturn(entityManagerFactory);
        when(entityManagerFactory.unwrap(SessionFactory.class)).thenReturn(sessionFactory);
    }

    @Test
    public void reader_should_build_JpaCursorItemReader_correctly() {
        ItemReader<DocaposteEventHistoryEntity> reader = config.reader(entityManager);
        assertNotNull(reader);
        assertTrue(reader instanceof JpaCursorItemReader);

        Object queryString = getField(reader, "queryString");
        assertNotNull("queryString doit être défini", queryString);
        assertTrue(queryString.toString().toLowerCase().contains("from docaposte"));

        Object params = getField(reader, "parameterValues");
        assertTrue(params instanceof Map);
        Map<?, ?> map = (Map<?, ?>) params;
        assertEquals(RequestTypeEnum.SYNCHRONISATION, map.get("requestType"));
        assertTrue(map.containsKey("status"));

        Object statuses = map.get("status");
        assertNotNull(statuses);
        assertTrue(statuses.toString().contains(RequestTypeStatusEnum.UPDATE_TO_SEND.name()));
        assertTrue(statuses.toString().contains(RequestTypeStatusEnum.UPDATE_REJECTED.name()));

        // Nom facultatif selon la version du batch
        Object nameField = getAnyField(reader, "name", "readerName", "nameSupplier");
        if (nameField != null) {
            assertNotNull(nameField);
        }
    }

    @Test
    public void reader_should_call_entityManagerFactory_unwrap_correctly() {
        config.reader(entityManager);
        verify(entityManager, times(1)).getEntityManagerFactory();
        verify(entityManagerFactory, times(1)).unwrap(SessionFactory.class);
    }

    // ==== Helpers réflexion ====
    private Object getField(Object target, String name) {
        try {
            Field f = findField(target.getClass(), name);
            if (f == null) return null;
            f.setAccessible(true);
            return f.get(target);
        } catch (Exception e) {
            return null;
        }
    }

    private Object getAnyField(Object target, String... candidates) {
        for (String name : candidates) {
            Object val = getField(target, name);
            if (val != null) return val;
        }
        return null; // OK si aucun champ trouvé (version Spring Batch récente)
    }

    private Field findField(Class<?> clazz, String name) {
        for (Class<?> c = clazz; c != null; c = c.getSuperclass()) {
            try {
                return c.getDeclaredField(name);
            } catch (NoSuchFieldException ignored) {
            }
        }
        return null;
    }
}