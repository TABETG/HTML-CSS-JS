package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.tasklet;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.manager.FileManager;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.ContractTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.meteorflux.repository.MeteorFluxRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.io.*;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit 4 – 100 % coverage LoadDailyMeteorFileTasklet
 * Compatible Jenkins / Sonar / Jacoco
 */
@RunWith(MockitoJUnitRunner.class)
public class LoadDailyMeteorFileTaskletTest {

    @Mock
    private MeteorFluxRepository meteorFluxRepository;

    @Mock
    private FileManager fileManager;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @InjectMocks
    private LoadDailyMeteorFileTasklet tasklet;

    private File validFile;
    private File invalidFile;

    @Before
    public void setUp() throws Exception {
        validFile = File.createTempFile("meteor_valid", ".txt");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(validFile))) {
            // Ligne complète et cohérente avec les index utilisés
            StringBuilder sb = new StringBuilder();
            sb.append("02"); // code
            sb.append(String.format("%-23s", "12345678901234567890123")); // loanAccountNumber
            sb.append(String.format("%65s", "")); // padding
            sb.append("001"); // idProt
            sb.append("0000000000000010"); // personalContributionAmount
            sb.append("0000000000000020"); // purchaseAmount
            sb.append("0000000000000030"); // renovationAmount
            sb.append(String.format("%48s", "")); // padding
            sb.append("0000000000000040"); // landAmount
            sb.append(String.format("%370s", "")); // padding
            sb.append(String.format("%-23s", "loanFolderTest")); // loanFolderId
            writer.write(sb.toString());
            writer.newLine();
        }

        invalidFile = File.createTempFile("meteor_invalid", ".txt");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(invalidFile))) {
            writer.write("invalid_line");
            writer.newLine();
        }
    }

    // =====================================================
    // =============== TESTS PRINCIPAUX ====================
    // =====================================================

    @Test
    public void execute_should_return_finished_when_no_files() throws Exception {
        when(fileManager.getFiles()).thenReturn(Collections.emptyList());

        RepeatStatus result = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, result);
        verify(fileManager).getFiles();
        verifyNoInteractions(meteorFluxRepository);
    }

    @Test
    public void execute_should_process_valid_file_and_archive() throws Exception {
        MeteorFile meteorFile = new MeteorFile(validFile, validFile.getName());
        when(fileManager.getFiles()).thenReturn(Collections.singletonList(meteorFile));
        when(meteorFluxRepository.existsByLoanAccountNumber(anyString())).thenReturn(false);
        when(meteorFluxRepository.saveAll(anyList())).thenReturn(Collections.emptyList());

        RepeatStatus result = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, result);
        verify(meteorFluxRepository, atLeastOnce()).saveAll(anyList());
        verify(fileManager, atLeastOnce()).archiveFile(any(MeteorFile.class));
    }

    @Test
    public void execute_should_handle_invalid_file_but_still_archive() throws Exception {
        MeteorFile meteorFile = new MeteorFile(invalidFile, invalidFile.getName());
        when(fileManager.getFiles()).thenReturn(Collections.singletonList(meteorFile));

        RepeatStatus result = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, result);
        verify(fileManager, atLeastOnce()).archiveFile(any(MeteorFile.class));
    }

    // =====================================================
    // =============== TESTS STATIQUES =====================
    // =====================================================

    @Test
    public void convertIdProtToContractType_should_return_expected_values() throws Exception {
        String pri = invokeConvert("001");
        String pro = invokeConvert("003");
        String none = invokeConvert("999");
        assertEquals(ContractTypeEnum.PRI.getCode(), pri);
        assertEquals(ContractTypeEnum.PRO.getCode(), pro);
        assertEquals("", none);
    }

    @Test
    public void valueIsEmptyOrNull_should_return_true_and_false() {
        assertTrue(LoadDailyMeteorFileTasklet.valueIsEmptyOrNull(null));
        assertTrue(LoadDailyMeteorFileTasklet.valueIsEmptyOrNull(""));
        assertFalse(LoadDailyMeteorFileTasklet.valueIsEmptyOrNull("ok"));
    }

    // =====================================================
    // =============== MÉTHODES UTILITAIRES ================
    // =====================================================

    private String invokeConvert(String idProt) throws Exception {
        java.lang.reflect.Method m = LoadDailyMeteorFileTasklet.class
                .getDeclaredMethod("convertIdProtToContractType", String.class);
        m.setAccessible(true);
        return (String) m.invoke(null, idProt);
    }
}