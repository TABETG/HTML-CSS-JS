package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.job;

import com.bnpparibas.bddf.cqrs.command.v2.CommandExecutorV2;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.processor.BillingSpaceClosureProcessor;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.reader.BillingSpaceClosureReader;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.reader.ReplayBillingspaceClosureReader;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.tasklet.UpdateBillingSpaceToStatusClosedTasklet;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.writer.BillingSpaceClosureWriter;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.listener.CommonStepExecutionListener;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.repository.DocaposteEventHistoryRepository;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.repository.docaposte.DocaposteRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.transaction.PlatformTransactionManager;

import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = {
        JobConfigurationBillingSpaceClosure.class,
        JobConfigurationBillingSpaceClosureTest.TestBeans.class
})
class JobConfigurationBillingSpaceClosureTest {

    @Autowired
    private ApplicationContext ctx;

    @Test
    void jobWiring_ok() {
        // Job présent
        Job job = ctx.getBean("billingSpaceClosureJob", Job.class);
        assertThat(job).isNotNull();

        // Steps présents (noms alignés avec la config)
        Step s1 = ctx.getBean("billingSpaceClosureStep", Step.class);
        Step s2 = ctx.getBean("replayBillingSpaceClosureStep", Step.class);
        Step s3 = ctx.getBean("updateBillingSpaceToStatusClosedStep", Step.class);

        assertThat(s1).isNotNull();
        assertThat(s2).isNotNull();
        assertThat(s3).isNotNull();
    }

    @TestConfiguration
    static class TestBeans {

        // === Mocks des beans utilisés dans la configuration ===
        @Bean @Primary
        BillingSpaceClosureReader billingSpaceClosureReader() {
            return Mockito.mock(BillingSpaceClosureReader.class);
        }

        @Bean @Primary
        BillingSpaceClosureProcessor billingSpaceClosureProcessor() {
            return Mockito.mock(BillingSpaceClosureProcessor.class);
        }

        @Bean @Primary
        BillingSpaceClosureWriter billingSpaceClosureWriter() {
            return Mockito.mock(BillingSpaceClosureWriter.class);
        }

        @Bean @Primary
        ReplayBillingspaceClosureReader replayBillingspaceClosureReader() {
            return Mockito.mock(ReplayBillingspaceClosureReader.class);
        }

        @Bean
        UpdateBillingSpaceToStatusClosedTasklet updateBillingSpaceToStatusClosedTasklet() {
            return Mockito.mock(UpdateBillingSpaceToStatusClosedTasklet.class);
        }

        @Bean
        CommonStepExecutionListener commonStepExecutionListener() {
            return Mockito.mock(CommonStepExecutionListener.class);
        }

        // ✅ Pas de ResourcelessTransactionManager : on mocke simplement le TM
        @Bean(name = "transactionManager")
        PlatformTransactionManager transactionManager() {
            return Mockito.mock(PlatformTransactionManager.class);
        }

        // === Dépendances manquantes qui faisaient planter le contexte ===
        @Bean
        CommandExecutorV2 commandExecutor() {
            return Mockito.mock(CommandExecutorV2.class);
        }

        @Bean
        DocaposteRepository docaposteRepository() {
            return Mockito.mock(DocaposteRepository.class);
        }

        @Bean
        DocaposteEventHistoryRepository docaposteEventHistoryRepository() {
            return Mockito.mock(DocaposteEventHistoryRepository.class);
        }

        // Souvent requis par la conf Spring Batch 5 (constructeurs @Bean)
        @Bean
        JobRepository jobRepository() {
            return Mockito.mock(JobRepository.class);
        }
    }
}