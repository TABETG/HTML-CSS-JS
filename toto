package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.update.reader;

import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.BillingSpaceStatusEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.repository.BillingSpaceJpaRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.data.domain.Sort;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit 4 – Couverture 100% BillingSpaceSynchroItemReader.
 * Compatible Sonar / Jenkins / Jacoco / Java 17+ / Spring Batch 5+.
 */
@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceSynchroItemReaderTest {

    @Mock
    private BillingSpaceJpaRepository repository;

    @InjectMocks
    private BillingSpaceSynchroItemReader reader;

    @Before
    public void setUp() {
        assertNotNull(reader);
    }

    @Test
    public void init_should_initialize_all_fields_correctly() throws Exception {
        reader.init();

        // Vérifie repository
        Object repo = getDeclaredFieldValue(reader, "repository");
        assertSame(repository, repo);

        // Vérifie methodName
        Object method = getDeclaredFieldValue(reader, "methodName");
        assertEquals("findByBillingSpaceStatus", method);

        // Vérifie arguments
        @SuppressWarnings("unchecked")
        List<Object> args = (List<Object>) getDeclaredFieldValue(reader, "arguments");
        assertNotNull(args);
        assertEquals(1, args.size());
        assertEquals(BillingSpaceStatusEnum.CREATED, args.get(0));

        // Vérifie sort (HashMap)
        Object sortObj = getDeclaredFieldValue(reader, "sort");
        assertNotNull(sortObj);

        if (sortObj instanceof Map) {
            Map<?, ?> sortMap = (Map<?, ?>) sortObj;
            assertTrue(sortMap.containsKey("loanFolderId"));
            assertEquals(Sort.Direction.ASC, sortMap.get("loanFolderId"));
        } else if (sortObj instanceof Sort) {
            Sort sort = (Sort) sortObj;
            assertTrue(sort.isSorted());
            assertTrue(sort.stream().anyMatch(order ->
                    order.getProperty().equals("loanFolderId") &&
                            order.getDirection() == Sort.Direction.ASC));
        } else {
            fail("Unexpected sort field type: " + sortObj.getClass());
        }

        verifyNoInteractions(repository);
    }

    @Test
    public void constructor_should_assign_repository_and_init_should_work() throws Exception {
        BillingSpaceJpaRepository mockRepo = mock(BillingSpaceJpaRepository.class);
        BillingSpaceSynchroItemReader customReader = new BillingSpaceSynchroItemReader(mockRepo);

        Object repoValue = getDeclaredFieldValue(customReader, "repository");
        assertSame(mockRepo, repoValue);

        customReader.init();

        Object method = getDeclaredFieldValue(customReader, "methodName");
        assertEquals("findByBillingSpaceStatus", method);

        @SuppressWarnings("unchecked")
        List<Object> args = (List<Object>) getDeclaredFieldValue(customReader, "arguments");
        assertNotNull(args);
        assertEquals(BillingSpaceStatusEnum.CREATED, args.get(0));

        verifyNoInteractions(mockRepo);
    }

    @Test
    public void init_should_be_idempotent_when_called_multiple_times() throws Exception {
        reader.init();
        reader.init();

        @SuppressWarnings("unchecked")
        List<Object> args = (List<Object>) getDeclaredFieldValue(reader, "arguments");
        assertNotNull(args);
        assertEquals(1, args.size());
        assertEquals(BillingSpaceStatusEnum.CREATED, args.get(0));

        verifyNoInteractions(repository);
    }

    /** Lecture récursive d’un champ privé dans la hiérarchie de classes. */
    private Object getDeclaredFieldValue(Object instance, String fieldName) throws Exception {
        Class<?> clazz = instance.getClass();
        while (clazz != null) {
            try {
                Field field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
                return field.get(instance);
            } catch (NoSuchFieldException e) {
                clazz = clazz.getSuperclass();
            }
        }
        throw new NoSuchFieldException("Champ introuvable : " + fieldName);
    }
}