package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.sender.processor;

import com.bnpparibas.bddf.cqrs.command.v2.CommandExecutorV2;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.pojo.SynchroSendLoanFolder;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.sender.SendSynchroLoanFoldersCommand;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.sender.SendSynchroLoanFoldersRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.mapper.DocaposteEventHistoryEntityMapperToDomain;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.model.DocaposteEventHistoryEntity;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 100% coverage pour BillingSpaceSendSynchroItemProcessor.
 * Compatible Sonar / Jenkins / Jacoco.
 */
@RunWith(MockitoJUnitRunner.class)
public class BillingSpaceSendSynchroItemProcessorTest {

    @InjectMocks
    private BillingSpaceSendSynchroItemProcessor processor;

    @Mock
    private CommandExecutorV2 commandExecutor;

    @Mock
    private DocaposteEventHistoryEntity entity;

    @Mock
    private SynchroSendLoanFolder expectedResponse;

    @Before
    public void setUp() {
        when(entity.getLoanFolderId()).thenReturn("LF123");
    }

    @Test
    public void process_should_execute_command_and_return_result() {
        try (MockedStatic<DocaposteEventHistoryEntityMapperToDomain> mockedMapper =
                     Mockito.mockStatic(DocaposteEventHistoryEntityMapperToDomain.class)) {

            Object mappedDomain = new Object();
            mockedMapper.when(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(entity))
                    .thenReturn(mappedDomain);

            when(commandExecutor.execute(eq(SendSynchroLoanFoldersCommand.class),
                    any(SendSynchroLoanFoldersRequest.class)))
                    .thenReturn(expectedResponse);

            SynchroSendLoanFolder result = processor.process(entity);

            assertNotNull(result);
            assertSame(expectedResponse, result);

            // Vérifie l'appel du mapper
            mockedMapper.verify(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(entity));
            // Vérifie l'appel du commandExecutor
            verify(commandExecutor, times(1))
                    .execute(eq(SendSynchroLoanFoldersCommand.class), any(SendSynchroLoanFoldersRequest.class));
        }
    }

    @Test(expected = RuntimeException.class)
    public void process_should_throw_exception_when_executor_fails() {
        try (MockedStatic<DocaposteEventHistoryEntityMapperToDomain> mockedMapper =
                     Mockito.mockStatic(DocaposteEventHistoryEntityMapperToDomain.class)) {

            Object mappedDomain = new Object();
            mockedMapper.when(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(entity))
                    .thenReturn(mappedDomain);

            when(commandExecutor.execute(eq(SendSynchroLoanFoldersCommand.class),
                    any(SendSynchroLoanFoldersRequest.class)))
                    .thenThrow(new RuntimeException("failure"));

            processor.process(entity);
        }
    }

    @Test
    public void process_should_call_mapper_and_use_loanFolderId() {
        try (MockedStatic<DocaposteEventHistoryEntityMapperToDomain> mockedMapper =
                     Mockito.mockStatic(DocaposteEventHistoryEntityMapperToDomain.class)) {

            Object mappedDomain = new Object();
            mockedMapper.when(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(entity))
                    .thenReturn(mappedDomain);

            when(commandExecutor.execute(eq(SendSynchroLoanFoldersCommand.class),
                    any(SendSynchroLoanFoldersRequest.class)))
                    .thenReturn(expectedResponse);

            SynchroSendLoanFolder result = processor.process(entity);

            assertEquals(expectedResponse, result);
            verify(commandExecutor).execute(eq(SendSynchroLoanFoldersCommand.class),
                    ArgumentMatchers.any(SendSynchroLoanFoldersRequest.class));
        }
    }
}