package com.bnpparibas.dsibddf.ap10530.incident.infrastructure.ficp.service; 

import java.io.InputStream; 
import java.io.OutputStream; 
import java.net.URL; 
import java.net.URLEncoder; 
import java.net.HttpURLConnection; 
import java.util.Base64; 

import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.beans.factory.annotation.Qualifier; 
import org.springframework.beans.factory.annotation.Value; 
import org.springframework.beans.factory.config.ConfigurableBeanFactory; 
import org.springframework.context.annotation.Scope; 
import org.springframework.stereotype.Component; 

import com.bnpparibas.dsibddf.ap10530.incident.domain.model.ApiException; 
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.ficp.dto.FICPResponse; 
import com.fasterxml.jackson.core.JsonProcessingException; 
import com.fasterxml.jackson.databind.DeserializationFeature; 
import com.fasterxml.jackson.databind.ObjectMapper; 

import javax.net.ssl.HttpsURLConnection; 
import javax.net.ssl.SSLSocketFactory; 

/**
 * Client HTTP pour communiquer avec le webservice FICP (Fichier des Incidents de Crédit des Particuliers).
 * Cette classe gère la construction de la requête HTTPS, l’authentification Basic,
 * et la désérialisation de la réponse JSON en un objet FICPResponse.
 */
@Component 
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) // Chaque appel crée une nouvelle instance
public class PobiFicpClient { 

    // Logger pour afficher les informations de débogage et les erreurs
    private static final Logger LOGGER = LoggerFactory.getLogger(PobiFicpClient.class); 

    // URL du service REST FICP (injectée depuis application.properties)
    @Value("${ficp.ws.resturl}") 
    private String address; 

    // Identifiant de profil utilisé pour l’authentification Basic
    @Value("${ficp.ws.login.idprofil}") 
    private String idProfil; 

    // Données utilisateur (mot de passe ou token selon le service)
    @Value("${ficp.ws.login.userdata}") 
    private String userData; 

    // Fabrique SSL spécifique (probablement configurée pour z/OS)
    @Autowired 
    @Qualifier("zosSSLFactory") 
    SSLSocketFactory sslFactory; 

    /** Retourne l'adresse du service FICP */
    public String getAddress() { 
        return address; 
    } 

    /** Définit l'adresse du service FICP */
    public void setAddress(final String address) { 
        this.address = address; 
    } 

    /** Retourne l'identifiant de profil */
    public String getIdProfil() { 
        return idProfil; 
    } 

    /** Définit l'identifiant de profil */
    public void setIdProfil(final String idProfil) { 
        this.idProfil = idProfil; 
    } 

    /** Retourne les données utilisateur */
    public String getUserData() { 
        return userData; 
    } 

    /** Définit les données utilisateur */
    public void setUserData(final String userData) { 
        this.userData = userData; 
    } 

    /**
     * Construit la chaîne d'identifiants pour l'authentification Basic HTTP.
     * Exemple : idProfil:userData (encodés via URLEncoder)
     */
    private String getCredentials() { 
        final StringBuilder creds = new StringBuilder(); 
        creds.append(URLEncoder.encode(idProfil)); 
        creds.append(':'); 
        creds.append(URLEncoder.encode(userData)); 
        return creds.toString(); 
    } 

    /**
     * Envoie une requête HTTPS au service FICP et désérialise la réponse JSON.
     * @param path chemin relatif de l’endpoint (ex: /ficp/pp/global)
     * @param req contenu du body (paramètres encodés)
     * @return FICPResponse désérialisé ou null si erreur
     */
    private FICPResponse ficpSend(final String path, final String req) { 
        HttpsURLConnection conn = null; 
        FICPResponse result = null; 
        final String fullAddress = address + path; 
        LOGGER.debug("URL = " + fullAddress); 

        try { 
            // Création de la connexion HTTPS
            final URL url = new URL(fullAddress); 
            conn = (HttpsURLConnection) url.openConnection(); 
            conn.setSSLSocketFactory(sslFactory); 

            // Encodage Base64 des credentials Basic Auth
            final String creds = Base64.getEncoder().encodeToString(getCredentials().getBytes("ISO8859-1")); 

            conn.setDoOutput(true); // autorise l’envoi de données dans le body
            conn.setRequestProperty("Authorization", "Basic " + creds); // ajoute l’entête HTTP Authorization
            conn.setRequestProperty("Accept", "application/json"); // demande une réponse JSON

            // Envoi du corps de la requête (paramètres encodés)
            try (final OutputStream os = conn.getOutputStream()) { 
                os.write(req.getBytes("ISO8859-1")); 
            } 

            // Vérifie le code HTTP retourné
            final int responseCode = conn.getResponseCode(); 
            if (responseCode != HttpURLConnection.HTTP_OK) { 
                // Si différent de 200, lève une ApiException
                throw new ApiException(1, "Invalid HTTP response code"); 
            } 

            // Lecture du flux JSON de réponse
            try (final InputStream is = conn.getInputStream()) { 
                final ObjectMapper mapper = new ObjectMapper(); 
                mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY); // gère les valeurs uniques comme tableaux
                result = mapper.readValue(is, FICPResponse.class); // désérialisation JSON → objet FICPResponse
                conn = null; // empêche la déconnexion dans finally
                return result; 
            } 
        } catch (Exception e) { 
            // Journalisation des erreurs avec message détaillé
            LOGGER.error(String.format("Error during call to REST service %s, message : %s", fullAddress, e.getMessage()), e); 
            return result; 
        } finally { 
            if (conn != null) { 
                // En cas d'erreur ou d'exception, ferme la connexion HTTPS
                conn.disconnect(); 
            } 
        } 
    } 

    /**
     * Appel principal du webservice : recherche globale FICP pour une personne physique.
     * @param bdfKey identifiant Banque de France de la personne
     * @param motif motif de la consultation
     * @param cibEtc identifiant interne (code agence, etc.)
     * @param typeCredit type de crédit concerné
     * @return FICPResponse contenant la réponse du service
     */
    public FICPResponse searchGlobalPP(final String bdfKey, final String motif, final String cibEtc, final String typeCredit) { 
        LOGGER.debug("Requesting FICP GlobalePersonnePhysique for {}", bdfKey); 

        // Construction manuelle des paramètres de la requête
        final StringBuilder req = new StringBuilder(); 
        req.append("cleBdf=").append(URLEncoder.encode(bdfKey)); 
        req.append("&motifConsult=").append(URLEncoder.encode(motif)); 
        req.append("&typeCredit=").append(URLEncoder.encode(typeCredit)); 
        req.append("&cibEtc=").append(URLEncoder.encode(cibEtc)); 

        // Appel du service REST FICP via méthode ficpSend()
        final FICPResponse response = ficpSend("/ficp/pp/global", req.toString()); 

        // Si le niveau de log DEBUG est activé, affiche la réponse JSON
        if (LOGGER.isDebugEnabled()) { 
            try { 
                ObjectMapper mapper = new ObjectMapper(); 
                LOGGER.debug("response {}", mapper.writeValueAsString(response)); 
            } catch (JsonProcessingException jpe) { 
                LOGGER.debug("Failed to serialize response as JSON", jpe); 
            } 
        } 
        return response; 
    } 
}
