package com.bnpparibas.dsibddf.ap00420.streamfact.batch.sendtobmd.service.batch.security.openpgp;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.sendtobmd.service.batch.security.openpgp.OnePassSignatureProcessor.PartnerPublicKeyPair;
import org.bouncycastle.openpgp.PGPSignature;
import org.bouncycastle.openpgp.PGPSignatureSubpacketVector;
import org.bouncycastle.openpgp.PGPPublicKey;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.FileWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class OnePassSignatureProcessorTest {

    private OnePassSignatureProcessor processor;

    @Before
    public void setUp() {
        processor = new OnePassSignatureProcessor();
    }

    @Test
    public void class_should_have_component_and_constants() throws Exception {
        assertNotNull(OnePassSignatureProcessor.class.getAnnotation(Component.class));
        Field provider = OnePassSignatureProcessor.class.getDeclaredField("PROVIDER");
        Field buffer = OnePassSignatureProcessor.class.getDeclaredField("BUFFER_SIZE");
        provider.setAccessible(true);
        buffer.setAccessible(true);
        assertEquals("BC", provider.get(null));
        assertTrue((int) buffer.get(null) > 0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void encrypt_should_throw_when_partners_list_is_empty() throws Exception {
        // Liste vide DU BON TYPE générique
        processor.encryptOnePassSignature("enc.out", "in.txt",
                Collections.<PartnerPublicKeyPair>emptyList(), null, false, false, false);
    }

    @Test(expected = IllegalArgumentException.class)
    public void decrypt_should_throw_when_private_key_pair_is_null() throws Exception {
        // Liste vide DU BON TYPE générique
        processor.decryptOnePassSignature("enc.in",
                Collections.<PartnerPublicKeyPair>emptyList(), null, "dec.out", false);
    }

    @Test
    public void existsAndNotEmptyContent_should_cover_true_and_false() throws Exception {
        File f = File.createTempFile("ops", ".tmp");
        f.deleteOnExit();
        try (FileWriter w = new FileWriter(f)) { w.write("x"); }

        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("existsAndNotEmptyContent", String.class);
        m.setAccessible(true);
        assertTrue((boolean) m.invoke(processor, f.getAbsolutePath()));
        assertFalse((boolean) m.invoke(processor, "not_exists.file"));
    }

    @Test
    public void isPGPKeyFile_should_return_false_for_non_pgp() throws Exception {
        File f = File.createTempFile("ops_key", ".dat");
        f.deleteOnExit();
        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("isPGPKeyFile", String.class);
        m.setAccessible(true);
        assertFalse((boolean) m.invoke(processor, f.getAbsolutePath()));
    }

    @Test
    public void isValidPGPPublicKey_should_cover_all_branches() throws Exception {
        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("isValidPGPPublicKey", PGPPublicKey.class, String.class);
        m.setAccessible(true);

        PGPPublicKey key1 = mock(PGPPublicKey.class);
        when(key1.getValidSeconds()).thenReturn(0L);
        assertTrue((boolean) m.invoke(processor, key1, "file.asc"));

        PGPPublicKey key2 = mock(PGPPublicKey.class);
        when(key2.getValidSeconds()).thenReturn(999999L);
        when(key2.getCreationTime()).thenReturn(new Date(System.currentTimeMillis() - 60_000));
        assertTrue((boolean) m.invoke(processor, key2, "file.asc"));

        PGPPublicKey key3 = mock(PGPPublicKey.class);
        when(key3.getValidSeconds()).thenReturn(1L);
        when(key3.getCreationTime()).thenReturn(new Date(System.currentTimeMillis() - 3_600_000));
        when(key3.getKeyID()).thenReturn(0x1234L);
        assertFalse((boolean) m.invoke(processor, key3, "file.asc"));
    }

    @Test
    public void isMatchingUsage_should_cover_true_and_false() throws Exception {
        // APPEL VIA RÉFLEXION (méthode private)
        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("isMatchingUsage", PGPSignature.class, int.class);
        m.setAccessible(true);

        PGPSignature sig1 = mock(PGPSignature.class);
        when(sig1.hasSubpackets()).thenReturn(false);
        assertTrue((boolean) m.invoke(processor, sig1, 1));

        PGPSignature sig2 = mock(PGPSignature.class);
        PGPSignatureSubpacketVector vec = mock(PGPSignatureSubpacketVector.class);
        when(sig2.hasSubpackets()).thenReturn(true);
        when(sig2.getHashedSubPackets()).thenReturn(vec);

        Field keyFlagsField = OnePassSignatureProcessor.class.getDeclaredField("KEY_FLAGS");
        keyFlagsField.setAccessible(true);
        int KEY_FLAGS_INDEX = (int) keyFlagsField.get(null);

        when(vec.hasSubpacket(KEY_FLAGS_INDEX)).thenReturn(true);
        when(vec.getKeyFlags()).thenReturn(0);
        assertFalse((boolean) m.invoke(processor, sig2, 2));
    }

    @Test
    public void hasKeyFlags_should_cover_master_and_subkey_paths() throws Exception {
        Method hasKeyFlags = OnePassSignatureProcessor.class.getDeclaredMethod("hasKeyFlags", PGPPublicKey.class, int.class);
        hasKeyFlags.setAccessible(true);

        PGPPublicKey master = mock(PGPPublicKey.class);
        when(master.isMasterKey()).thenReturn(true);
        @SuppressWarnings("unchecked")
        Iterator<PGPSignature> it = (Iterator<PGPSignature>) mock(Iterator.class);
        when(it.hasNext()).thenReturn(true, false);
        when(it.next()).thenReturn(mock(PGPSignature.class));
        when(master.getSignaturesOfType(anyInt())).thenReturn(it);

        OnePassSignatureProcessor spy = spy(processor);
        Method isMatching = OnePassSignatureProcessor.class.getDeclaredMethod("isMatchingUsage", PGPSignature.class, int.class);
        isMatching.setAccessible(true);
        doReturn(false).when(spy).isMatchingUsage(any(PGPSignature.class), anyInt());
        assertFalse((boolean) hasKeyFlags.invoke(spy, master, 2));

        PGPPublicKey sub = mock(PGPPublicKey.class);
        when(sub.isMasterKey()).thenReturn(false);
        when(sub.getSignaturesOfType(anyInt())).thenReturn(Collections.<PGPSignature>emptyList().iterator());
        assertTrue((boolean) hasKeyFlags.invoke(processor, sub, 1));
    }

    @Test
    public void private_methods_with_internal_types_should_be_invocable() throws Exception {
        Method m1 = findMethodByName("getPartnerAllPGPPublicKeys");
        m1.setAccessible(true);
        try { m1.invoke(processor, new Object[]{null}); } catch (Throwable ignored) { assertTrue(true); }

        Method m2 = findMethodByName("getFirstValidEncryptionKey");
        m2.setAccessible(true);
        try { m2.invoke(processor, new Object[]{null}); } catch (Throwable ignored) { assertTrue(true); }

        Method m3 = findMethodByName("getAllPGPPrivateKeys");
        m3.setAccessible(true);
        Object privateKeyPair = new Object() { @Override public String toString(){ return "pair"; } };
        try { m3.invoke(processor, privateKeyPair); } catch (Throwable ignored) { assertTrue(true); }

        Method m4 = findMethodByName("readPGPPrivateKeys");
        m4.setAccessible(true);
        Object privateKey = new Object(){ @Override public String toString(){ return "priv"; } };
        try { m4.invoke(processor, privateKey); } catch (Throwable ignored) { assertTrue(true); }
    }

    @Test
    public void readPGPPublicKeysFromPGPKeyFile_should_return_empty_for_invalid_paths() throws Exception {
        Method m = OnePassSignatureProcessor.class.getDeclaredMethod("readPGPPublicKeysFromPGPKeyFile", String.class);
        m.setAccessible(true);
        @SuppressWarnings("unchecked")
        List<?> empty1 = (List<?>) m.invoke(processor, (String) null);
        @SuppressWarnings("unchecked")
        List<?> empty2 = (List<?>) m.invoke(processor, "");
        @SuppressWarnings("unchecked")
        List<?> empty3 = (List<?>) m.invoke(processor, "nope.asc");
        assertTrue(empty1.isEmpty());
        assertTrue(empty2.isEmpty());
        assertTrue(empty3.isEmpty());
    }

    @Test
    public void all_declared_private_methods_should_exist() {
        String[] names = {
                "getFirstValidEncryptionKey",
                "getFirstValidEncryptionKeyFromPGPKeyFile",
                "getFirstValidSigningDataSecretKey",
                "readValidSigningDataSecretKey",
                "getFirstValidSigningDataSecretKeyFromPGPKeyFile",
                "readSecretKeyFromKeystore",
                "getPartnerAllPGPPublicKeys",
                "readPGPPublicKeysFromPGPKeyFile",
                "getAllPGPPrivateKeys",
                "readPGPPrivateKeys",
                "readPGPPrivateKeysFromPGPKeyFile",
                "existsAndNotEmptyContent",
                "intiatePGPSignatureGenerator",
                "isValidPGPPublicKey",
                "isPGPKeyFile",
                "hasKeyFlags",
                "isMatchingUsage"
        };
        Set<String> present = new HashSet<String>();
        for (Method m : OnePassSignatureProcessor.class.getDeclaredMethods()) {
            present.add(m.getName());
        }
        for (String n : names) {
            assertTrue("Missing: " + n, present.contains(n));
        }
    }

    private Method findMethodByName(String name) {
        for (Method m : OnePassSignatureProcessor.class.getDeclaredMethods()) {
            if (m.getName().equals(name)) return m;
        }
        fail("Method not found: " + name);
        return null;
    }
}