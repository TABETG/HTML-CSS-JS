package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.tasklet;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.manager.FileManager;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.ContractTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.meteorflux.repository.MeteorFluxRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.io.*;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit 4 – 100 % coverage LoadDailyMeteorFileTasklet
 * Compatible Sonar / Jenkins / Jacoco / Java 17+
 */
@RunWith(MockitoJUnitRunner.class)
public class LoadDailyMeteorFileTaskletTest {

    @Mock
    private MeteorFluxRepository meteorFluxRepository;

    @Mock
    private FileManager fileManager;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @InjectMocks
    private LoadDailyMeteorFileTasklet tasklet;

    private File validFile;
    private File invalidFile;

    @Before
    public void setUp() throws Exception {
        validFile = File.createTempFile("meteor_valid", ".txt");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(validFile))) {
            StringBuilder sb = new StringBuilder();
            sb.append("02");                                              // code
            sb.append(String.format("%-23s", "12345678901234567890123")); // loanAccountNumber
            sb.append(String.format("%65s", ""));                         // padding
            sb.append("001");                                             // idProt
            sb.append("0000000000000010");                                // personalContributionAmount
            sb.append("0000000000000020");                                // purchaseAmount
            sb.append("0000000000000030");                                // renovationAmount
            sb.append(String.format("%48s", ""));                         // padding
            sb.append("0000000000000040");                                // landAmount
            sb.append(String.format("%370s", ""));                        // padding
            sb.append(String.format("%-23s", "loanFolderTest"));          // loanFolderId
            writer.write(sb.toString());
            writer.newLine();
        }

        invalidFile = File.createTempFile("meteor_invalid", ".txt");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(invalidFile))) {
            writer.write("invalid_line");
            writer.newLine();
        }
    }

    // =====================================================
    // =============== TESTS PRINCIPAUX ====================
    // =====================================================

    @Test
    public void execute_should_return_finished_when_no_files() throws Exception {
        when(fileManager.getFiles()).thenReturn(Collections.emptyList());

        RepeatStatus result = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, result);
        verify(fileManager).getFiles();
    }

    @Test
    public void execute_should_process_valid_file_and_archive() throws Exception {
        MeteorFile meteorFile = new MeteorFile(validFile, validFile.getName());
        when(fileManager.getFiles()).thenReturn(Collections.singletonList(meteorFile));
        when(meteorFluxRepository.existsByLoanAccountNumber(anyString())).thenReturn(false);
        when(meteorFluxRepository.saveAll(anyList())).thenReturn(Collections.emptyList());

        RepeatStatus result = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, result);
        verify(meteorFluxRepository, atLeastOnce()).saveAll(anyList());
        // on précise explicitement la version archiveFile(MeteorFile)
        verify(fileManager).archiveFile((MeteorFile) any(MeteorFile.class));
    }

    @Test
    public void execute_should_handle_invalid_file_gracefully() throws Exception {
        MeteorFile meteorFile = new MeteorFile(invalidFile, invalidFile.getName());
        when(fileManager.getFiles()).thenReturn(Collections.singletonList(meteorFile));

        RepeatStatus result = tasklet.execute(stepContribution, chunkContext);

        assertEquals(RepeatStatus.FINISHED, result);
        verify(fileManager, never()).archiveFile(any(MeteorFile.class));
    }

    @Test
    public void extractMeteorFileData_should_return_true_for_valid_file() throws Exception {
        when(meteorFluxRepository.existsByLoanAccountNumber(anyString())).thenReturn(false);
        when(meteorFluxRepository.saveAll(anyList())).thenReturn(Collections.emptyList());

        boolean result = invokeExtract(validFile);

        assertTrue(result);
        verify(meteorFluxRepository, atLeastOnce()).saveAll(anyList());
    }

    @Test
    public void extractMeteorFileData_should_return_true_even_when_invalid() throws Exception {
        boolean result = invokeExtract(invalidFile);
        assertTrue(result);
        verifyNoInteractions(meteorFluxRepository);
    }

    // =====================================================
    // =============== TESTS STATIQUES =====================
    // =====================================================

    @Test
    public void convertIdProtToContractType_should_return_expected_values() throws Exception {
        String pri = invokeConvert("001");
        String pro = invokeConvert("003");
        String none = invokeConvert("999");
        assertEquals(ContractTypeEnum.PRI.getCode(), pri);
        assertEquals(ContractTypeEnum.PRO.getCode(), pro);
        assertEquals("", none);
    }

    @Test
    public void valueIsEmptyOrNull_should_return_true_and_false() {
        assertTrue(LoadDailyMeteorFileTasklet.valueIsEmptyOrNull(null));
        assertTrue(LoadDailyMeteorFileTasklet.valueIsEmptyOrNull(""));
        assertFalse(LoadDailyMeteorFileTasklet.valueIsEmptyOrNull("x"));
    }

    @Test
    public void parseDecimal_should_handle_valid_invalid_and_empty_values() throws Exception {
        java.lang.reflect.Method m = LoadDailyMeteorFileTasklet.class
                .getDeclaredMethod("parseDecimal", String.class);
        m.setAccessible(true);

        BigDecimal ok = (BigDecimal) m.invoke(null, "123");
        BigDecimal empty = (BigDecimal) m.invoke(null, "   ");
        BigDecimal invalid = (BigDecimal) m.invoke(null, "XYZ");

        assertEquals(new BigDecimal("123"), ok);
        assertEquals(BigDecimal.ZERO, empty);
        assertEquals(BigDecimal.ZERO, invalid);
    }

    @Test
    public void safeSubstring_should_handle_short_and_null_values() throws Exception {
        java.lang.reflect.Method m = LoadDailyMeteorFileTasklet.class
                .getDeclaredMethod("safeSubstring", String.class, int.class, int.class);
        m.setAccessible(true);

        String result1 = (String) m.invoke(null, "abcdef", 1, 3);
        String result2 = (String) m.invoke(null, "short", 10, 20);
        String result3 = (String) m.invoke(null, null, 1, 3);

        assertEquals("bc", result1);
        assertEquals("", result2);
        assertEquals("", result3);
    }

    // =====================================================
    // =============== MÉTHODES UTILITAIRES ================
    // =====================================================

    private boolean invokeExtract(File file) throws Exception {
        java.lang.reflect.Method m = LoadDailyMeteorFileTasklet.class
                .getDeclaredMethod("extractMeteorFileData", File.class);
        m.setAccessible(true);
        return (boolean) m.invoke(tasklet, file);
    }

    private String invokeConvert(String idProt) throws Exception {
        java.lang.reflect.Method m = LoadDailyMeteorFileTasklet.class
                .getDeclaredMethod("convertIdProtToContractType", String.class);
        m.setAccessible(true);
        return (String) m.invoke(null, idProt);
    }
}