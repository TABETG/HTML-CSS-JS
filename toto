package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.tasklet;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.manager.FileManager;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.ContractTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.meteorflux.model.MeteorFlux;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.meteorflux.repository.MeteorFluxRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Corrigé pour 100% coverage + robustesse parsing.
 * Compatible Sonar / Jenkins / Jacoco / Java 17+.
 */
@Slf4j
@Component
public class LoadDailyMeteorFileTasklet implements Tasklet {

    @Autowired
    private MeteorFluxRepository meteorFluxRepository;

    @Autowired
    private FileManager fileManager;

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
        try {
            List<MeteorFile> files = fileManager.getFiles();
            if (files.isEmpty()) {
                log.info("No Meteor file found for import.");
                return RepeatStatus.FINISHED;
            }

            for (MeteorFile file : files) {
                boolean ok = extractMeteorFileData(file.getFile());
                if (ok) {
                    log.info("File {} processed successfully.", file.getFile().getName());
                    fileManager.archiveFile(file);
                } else {
                    log.warn("File {} not processed due to errors.", file.getFile().getName());
                }
            }
        } catch (Exception e) {
            log.error("Error executing LoadDailyMeteorFileTasklet", e);
        }
        return RepeatStatus.FINISHED;
    }

    /**
     * Lecture et parsing du fichier Meteor.
     * @param file fichier texte
     * @return true si succès
     */
    private boolean extractMeteorFileData(File file) {
        List<MeteorFlux> fluxList = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = br.readLine()) != null) {
                // on ne traite que les lignes commençant par 02
                if (!line.startsWith("02")) {
                    continue;
                }
                try {
                    MeteorFlux flux = new MeteorFlux();

                    String loanAccountNumber = line.substring(2, 25).trim();
                    String idProt = line.substring(90, 93).trim();

                    String personalContributionAmount = line.substring(93, 109).trim();
                    String purchaseAmount = line.substring(109, 125).trim();
                    String renovationAmount = line.substring(125, 141).trim();
                    String landAmount = line.substring(171, 187).trim();

                    String loanFolderId = "";
                    if (line.length() >= 580) {
                        loanFolderId = line.substring(557, 580).trim();
                    }

                    flux.setLoanAccountNumber(loanAccountNumber);
                    flux.setContractType(convertIdProtToContractType(idProt));

                    flux.setPersonalContributionAmount(
                            valueIsEmptyOrNull(personalContributionAmount)
                                    ? BigDecimal.ZERO
                                    : new BigDecimal(personalContributionAmount));

                    flux.setPurchaseAmount(
                            valueIsEmptyOrNull(purchaseAmount)
                                    ? BigDecimal.ZERO
                                    : new BigDecimal(purchaseAmount));

                    flux.setRenovationAmount(
                            valueIsEmptyOrNull(renovationAmount)
                                    ? BigDecimal.ZERO
                                    : new BigDecimal(renovationAmount));

                    flux.setLandAmount(
                            valueIsEmptyOrNull(landAmount)
                                    ? BigDecimal.ZERO
                                    : new BigDecimal(landAmount));

                    flux.setLoanFolderId(loanFolderId);
                    flux.setCreationDate(LocalDateTime.now());

                    // Eviter doublon
                    if (!meteorFluxRepository.existsByLoanAccountNumber(loanAccountNumber)) {
                        fluxList.add(flux);
                    }
                } catch (Exception e) {
                    log.error("Error parsing line in file {}: {}", file.getName(), e.getMessage());
                }
            }

            if (!fluxList.isEmpty()) {
                meteorFluxRepository.saveAll(fluxList);
                log.info("{} MeteorFlux record(s) saved from file {}.", fluxList.size(), file.getName());
            } else {
                log.warn("No valid MeteorFlux record found in file {}.", file.getName());
            }

            return true;
        } catch (IOException e) {
            log.error("Error reading Meteor file {}: {}", file.getName(), e.getMessage());
            return false;
        } catch (Exception e) {
            log.error("Unexpected error while processing Meteor file {}: {}", file.getName(), e.getMessage());
            return false;
        }
    }

    /**
     * Convertit l’ID protocole en type de contrat.
     */
    private static String convertIdProtToContractType(String idProt) {
        if ("001".equals(idProt)) {
            return ContractTypeEnum.PRI.getCode();
        }
        if ("003".equals(idProt)) {
            return ContractTypeEnum.PRO.getCode();
        }
        return "";
    }

    /**
     * Vérifie si la valeur est vide ou null.
     */
    public static boolean valueIsEmptyOrNull(String value) {
        return value == null || value.trim().isEmpty();
    }
}