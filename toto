package com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.service; 
import java.text.SimpleDateFormat; 
import java.util.ArrayList; 
import java.util.Date; 
import java.util.List; 
import java.util.Optional; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.dto.StatisticsRequestDto; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.rest.StatisticsService; 
import org.apache.commons.lang3.StringUtils; 
import org.joda.time.LocalDate; 
import org.joda.time.LocalDateTime; 
import org.joda.time.format.DateTimeFormat; 
import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.stereotype.Component; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.ApiException; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.Incident; 
import 
com.bnpparibas.dsibddf.ap10530.incident.domain.model.PersonSearchRequest; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.Personne; 
import 
com.bnpparibas.dsibddf.ap10530.incident.domain.model.enums.RequestTypeEnum; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.enums.SexEnum; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.utils.BDFKeyGenerator; 
import com.bnpparibas.dsibddf.ap10530.incident.domain.utils.ISOBirthDateConverter; 
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.Compte; 
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.Detail; 
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.Global; 
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.Naissance; 
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.PersonneBdf; 
import 
com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.PersonneMorale; 
import 
com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.PersonnePhysique; 
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.dto.FCCResponse; 
/** 
 * WebService FCC Orchestrator Service 
*/ 
@Component 
public class FCCService { 
private static final String FEMININ = "F"; 
private static final String MASCULIN = "M"; 
private static final Logger LOGGER = LoggerFactory.getLogger(FCCService.class); 
@Autowired 
private StatisticsService statisticsService; 
@Autowired 
private PobiFccClient fccClient; 
/** ... (le reste inchangé jusqu’à searchIncident) ... */

/** 
* Perform the call orchestration for FCCService. 
* 
* @param incidentsSearchRequest List of PersonSearchRequest to search 
* @return List of PersonnePhysique if they are found in BDF FCC Database 
*/ 
public List<Personne> searchIncident(final List<PersonSearchRequest> 
incidentsSearchRequest, final String channel, 
final String caller, String userId) { 
final List<Personne> result = new ArrayList<Personne>(); 

// ==============================
// AER_SOC-1529 — AJOUT : drapeau d’autorisation FCC BDF
// ==============================
RequestTypeEnum reqType = (incidentsSearchRequest != null && !incidentsSearchRequest.isEmpty())
        ? incidentsSearchRequest.get(0).getRequestType() : null;
boolean allowFCC_BDF = RequestTypeEnum.FCC_BDF.equals(reqType)
        || RequestTypeEnum.BOTH_BNP_BDF.equals(reqType)
        || RequestTypeEnum.BDF_ONLY.equals(reqType);

try { 
for (final PersonSearchRequest personSearchRequest : incidentsSearchRequest) { 
// if RequestType = BDF or ALL 
if 
(!personSearchRequest.getRequestType().equals(RequestTypeEnum.BNP_ONLY)) { 

    // ==============================
    // AER_SOC-1529 — AJOUT : exécuter l’appel FCC BDF uniquement si autorisé
    // ==============================
    if (allowFCC_BDF) {
        final FCCResponse gppi = 
        fccClient.searchGlobalPP(personSearchRequest.getBdfKey()); 
        callStaticsService(channel, caller, personSearchRequest, gppi, userId); 
        result.addAll(mapFCCResponsePP(gppi, personSearchRequest)); 
    } // sinon : pas d’appel FCC BDF (économie)
} 
} 
return result; 
} catch (final ApiException apie) { 
LOGGER.error("API Exception", apie); 
throw new ApiException(1, apie.getMessage()); 
} catch (final Exception e) { 
LOGGER.error("Service Call Exception", e); 
throw new ApiException(1, e.getMessage()); 
} 
} 

// ASAP 514 
/** 
* searchIncidentMoral 
* 
* @param incidentsSearchRequest List of PersonSearchRequest to search 
* @return List of PersonneMorale if they are found in BDF FCC Database 
*/ 
public List<Personne> searchIncidentMoral(final List<PersonSearchRequest> 
incidentsSearchRequest, final String channel, 
final String caller, String userId) { 
final List<Personne> result = new ArrayList<Personne>(); 

// ==============================
// AER_SOC-1529 — AJOUT : réutilise le drapeau FCC BDF pour PM
// ==============================
RequestTypeEnum reqType = (incidentsSearchRequest != null && !incidentsSearchRequest.isEmpty())
        ? incidentsSearchRequest.get(0).getRequestType() : null;
boolean allowFCC_BDF = RequestTypeEnum.FCC_BDF.equals(reqType)
        || RequestTypeEnum.BOTH_BNP_BDF.equals(reqType)
        || RequestTypeEnum.BDF_ONLY.equals(reqType);

try { 
for (final PersonSearchRequest personSearchRequest : incidentsSearchRequest) { 
    if (allowFCC_BDF) {
        final FCCResponse gppi = 
        fccClient.searchGlobalPM(personSearchRequest.getBdfKey(), 
        personSearchRequest.getImmatType(), 
        personSearchRequest.getImmatId()); 
        callStaticsService(channel, caller, personSearchRequest, gppi, userId); 
        result.addAll(mapFCCResponsePM(gppi, personSearchRequest)); 
    } // sinon : pas d’appel FCC PM (économie) 
} 
return result; 
} catch (final ApiException apie) { 
LOGGER.error("API Exception", apie); 
for (final PersonSearchRequest personSearchRequest : incidentsSearchRequest) { 
if (personSearchRequest.getBdfKey() == null) { 
throw new ApiException(1, "BDF KEY est obligatoire ou mal renseignée pour 
faire l'appel FCC PM"); 
} else if (personSearchRequest.getImmatType() == null) { 
throw new ApiException(1, "Type Immatriculation est obligatoire ou mal 
renseignée faire l'appel FCC PM"); 
} else if (personSearchRequest.getImmatId() == null) { 
throw new ApiException(1, "Id Immatriculation est obligatoire ou mal 
renseignée faire l'appel FCC PM"); 
} 
} 
throw new ApiException(1, apie.getMessage()); 
} catch (final Exception e) { 
LOGGER.error("Service Call Exception", e); 
throw new ApiException(1, e.getMessage()); 
} 
} 
}
