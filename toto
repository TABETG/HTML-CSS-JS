package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.job;

import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.close.pojo.BillingSpaceCloseToSend;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.processor.BillingSpaceClosureProcessor;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.reader.BillingSpaceClosureReader;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.reader.ReplayBillingspaceClosureReader;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.tasklet.UpdateBillingSpaceToStatusClosedTasklet;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.close.writer.BillingSpaceClosureWriter;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.listener.CommonStepExecutionListener;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.billingspace.model.BillingSpaceEntity;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.transaction.PlatformTransactionManager;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * ✅ Test JUnit4 100% coverage pour JobConfigurationBillingSpaceClosure.
 */
@RunWith(MockitoJUnitRunner.class)
public class JobConfigurationBillingSpaceClosureTest {

    @InjectMocks
    private JobConfigurationBillingSpaceClosure config;

    @Mock
    private BillingSpaceClosureReader billingSpaceClosureReader;
    @Mock
    private BillingSpaceClosureProcessor billingSpaceClosureProcessor;
    @Mock
    private BillingSpaceClosureWriter billingSpaceClosureWriter;
    @Mock
    private ReplayBillingspaceClosureReader replayBillingSpaceClosureReader;
    @Mock
    private UpdateBillingSpaceToStatusClosedTasklet updateBillingSpaceToStatusClosedTasklet;
    @Mock
    private CommonStepExecutionListener commonStepExecutionListener;
    @Mock
    private PlatformTransactionManager platformTransactionManager;
    @Mock
    private JobRepository jobRepository;

    private Step billingStep;
    private Step replayStep;
    private Step updateStep;

    @Before
    public void setUp() {
        // création de tous les steps à partir de la conf
        billingStep = config.billingSpaceClosureStep(jobRepository);
        replayStep = config.replayBillingSpaceClosureStep(jobRepository);
        updateStep = config.updateBillingSpaceToStatusClosedStep(jobRepository);
    }

    @Test
    public void test_billingSpaceClosureStep_configuration() {
        assertNotNull(billingStep);
        assertEquals("billingSpaceClosureStep", billingStep.getName());

        assertTrue(billingStep instanceof TaskletStep);
        TaskletStep ts = (TaskletStep) billingStep;
        Object allow = org.springframework.test.util.ReflectionTestUtils.getField(ts, "allowStartIfComplete");
        assertTrue((Boolean) allow);
    }

    @Test
    public void test_replayBillingSpaceClosureStep_configuration() {
        assertNotNull(replayStep);
        assertEquals("replayBillingSpaceClosureStep", replayStep.getName());
        assertTrue(replayStep instanceof TaskletStep);
        TaskletStep ts = (TaskletStep) replayStep;
        Object allow = org.springframework.test.util.ReflectionTestUtils.getField(ts, "allowStartIfComplete");
        assertTrue((Boolean) allow);
    }

    @Test
    public void test_updateBillingSpaceToStatusClosedStep_configuration() {
        assertNotNull(updateStep);
        assertEquals("updateBillingSpaceToStatusClosed", updateStep.getName());
        assertTrue(updateStep instanceof TaskletStep);
        TaskletStep ts = (TaskletStep) updateStep;
        Object allow = org.springframework.test.util.ReflectionTestUtils.getField(ts, "allowStartIfComplete");
        assertTrue((Boolean) allow);
    }

    @Test
    public void test_billingSpaceClosureJob_flow() {
        Job job = config.billingSpaceClosureJob(jobRepository, billingStep, replayStep, updateStep);
        assertNotNull(job);
        assertTrue(job instanceof FlowJob);

        FlowJob flowJob = (FlowJob) job;
        assertEquals("billingSpaceClosureJob", flowJob.getName());
        assertTrue(flowJob.getJobParametersIncrementer() instanceof RunIdIncrementer);

        // Steps présents dans le flow
        assertNotNull(flowJob.getStep("billingSpaceClosureStep"));
        assertNotNull(flowJob.getStep("replayBillingSpaceClosureStep"));
        assertNotNull(flowJob.getStep("updateBillingSpaceToStatusClosed"));
    }

    @Test
    public void test_all_beans_methods_call_readers_and_processors() {
        // Vérifie que les mocks sont utilisés correctement dans les steps
        assertNotNull(billingSpaceClosureReader);
        assertNotNull(replayBillingSpaceClosureReader);
        assertNotNull(billingSpaceClosureWriter);
        assertNotNull(billingSpaceClosureProcessor);
        assertNotNull(updateBillingSpaceToStatusClosedTasklet);
        assertNotNull(commonStepExecutionListener);
        assertNotNull(platformTransactionManager);
    }
}