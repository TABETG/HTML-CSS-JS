package com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.tasklet;

import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.manager.FileManager;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.dailymeteorintegration.model.MeteorFile;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.commons.ContractTypeEnum;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.meteorflux.model.MeteorFlux;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.meteorflux.repository.MeteorFluxRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Version corrigée - 100 % coverage possible.
 * Corrige NumberFormatException + gestion des espaces vides.
 */
@Slf4j
@Component
public class LoadDailyMeteorFileTasklet implements Tasklet {

    @Autowired
    private MeteorFluxRepository meteorFluxRepository;

    @Autowired
    private FileManager fileManager;

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
        try {
            List<MeteorFile> files = fileManager.getFiles();
            if (files.isEmpty()) {
                log.warn("No file found!");
                return RepeatStatus.FINISHED;
            }

            for (MeteorFile file : files) {
                boolean processed = extractMeteorFileData(file.getFile());
                if (processed) {
                    log.info("File {} processed successfully.", file.getFile().getName());
                    fileManager.archiveFile(file);
                } else {
                    log.warn("File {} processing failed.", file.getFile().getName());
                }
            }
        } catch (Exception e) {
            log.error("Error executing LoadDailyMeteorFileTasklet", e);
        }
        return RepeatStatus.FINISHED;
    }

    /**
     * Lecture et parsing du fichier METEOR.
     */
    private boolean extractMeteorFileData(File file) {
        List<MeteorFlux> fluxList = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.startsWith("02")) {
                    continue;
                }

                try {
                    String loanAccountNumber = safeSubstring(line, 2, 25).trim();
                    String idProt = safeSubstring(line, 90, 93).trim();
                    String personalContributionAmount = safeSubstring(line, 93, 109).trim();
                    String purchaseAmount = safeSubstring(line, 109, 125).trim();
                    String renovationAmount = safeSubstring(line, 125, 141).trim();
                    String landAmount = safeSubstring(line, 171, 187).trim();
                    String loanFolderId = safeSubstring(line, 557, 580).trim();

                    MeteorFlux flux = new MeteorFlux();
                    flux.setLoanAccountNumber(loanAccountNumber);
                    flux.setContractType(convertIdProtToContractType(idProt));
                    flux.setPersonalContributionAmount(parseDecimal(personalContributionAmount));
                    flux.setPurchaseAmount(parseDecimal(purchaseAmount));
                    flux.setRenovationAmount(parseDecimal(renovationAmount));
                    flux.setLandAmount(parseDecimal(landAmount));
                    flux.setLoanFolderId(loanFolderId);
                    flux.setCreationDate(LocalDateTime.now());

                    if (!meteorFluxRepository.existsByLoanAccountNumber(loanAccountNumber)) {
                        fluxList.add(flux);
                    }
                } catch (Exception e) {
                    log.error("Error parsing line in {}: {}", file.getName(), e.getMessage());
                }
            }

            if (!fluxList.isEmpty()) {
                meteorFluxRepository.saveAll(fluxList);
                log.info("{} record(s) saved for file {}.", fluxList.size(), file.getName());
            } else {
                log.warn("No valid records found in {}.", file.getName());
            }

            return true;
        } catch (IOException e) {
            log.error("I/O error reading file {}: {}", file.getName(), e.getMessage());
            return false;
        } catch (Exception e) {
            log.error("Unexpected error while processing {}: {}", file.getName(), e.getMessage());
            return false;
        }
    }

    /**
     * Conversion d’un identifiant protocole en type de contrat.
     */
    private static String convertIdProtToContractType(String idProt) {
        if ("001".equals(idProt)) {
            return ContractTypeEnum.PRI.getCode();
        } else if ("003".equals(idProt)) {
            return ContractTypeEnum.PRO.getCode();
        }
        return "";
    }

    /**
     * Vérifie si la valeur est vide.
     */
    public static boolean valueIsEmptyOrNull(String value) {
        return value == null || value.trim().isEmpty();
    }

    /**
     * Parse un BigDecimal à partir d’une sous-chaîne.
     */
    private static BigDecimal parseDecimal(String value) {
        if (valueIsEmptyOrNull(value)) {
            return BigDecimal.ZERO;
        }
        try {
            return new BigDecimal(value.trim());
        } catch (NumberFormatException e) {
            log.warn("Invalid number format '{}', defaulting to 0", value);
            return BigDecimal.ZERO;
        }
    }

    /**
     * Sous-chaîne sûre (évite StringIndexOutOfBoundsException).
     */
    private static String safeSubstring(String value, int start, int end) {
        if (value == null || value.length() < start) {
            return "";
        }
        return value.substring(start, Math.min(value.length(), end));
    }
}