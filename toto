// src/test/java/com/bnpparibas/dsibddf/ap00420/streamfact/batch/replay/billingspacecreation/processor/BillingSpaceCreationErrorItemProcessorTest.java
package com.bnpparibas.dsibddf.ap00420.streamfact.batch.replay.billingspacecreation.processor;

import com.bnpparibas.bddf.cqrs.query.QueryExecutor;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.create.pojo.BillingSpaceCreationToSend;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.create.sender.GetBillingSpaceCreationToSendQuery;
import com.bnpparibas.dsibddf.ap00420.streamfact.application.billingspace.create.sender.GetBillingSpaceCreationToSendRequest;
import com.bnpparibas.dsibddf.ap00420.streamfact.domain.entity.history.model.DocaposteEventHistory;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.mapper.DocaposteEventHistoryEntityMapperToDomain;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.model.DocaposteEventHistoryEntity;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

/**
 * Test 100% coverage for BillingSpaceCreationErrorItemProcessor.
 */
@ExtendWith(MockitoExtension.class)
class BillingSpaceCreationErrorItemProcessorTest {

    @Test
    void process_shouldMapEntityAndExecuteQuery_andReturnResult() throws Exception {
        // Arrange
        QueryExecutor queryExecutor = mock(QueryExecutor.class);
        BillingSpaceCreationErrorItemProcessor processor = new BillingSpaceCreationErrorItemProcessor();

        // Inject the mock QueryExecutor into the processor (le champ est @Autowired et privé)
        java.lang.reflect.Field f = BillingSpaceCreationErrorItemProcessor.class.getDeclaredField("queryExecutor");
        f.setAccessible(true);
        f.set(processor, queryExecutor);

        DocaposteEventHistoryEntity entity = mock(DocaposteEventHistoryEntity.class);
        DocaposteEventHistory mappedDomain = mock(DocaposteEventHistory.class);
        when(mappedDomain.getLoanFolderId()).thenReturn("LF-123");

        BillingSpaceCreationToSend expected = mock(BillingSpaceCreationToSend.class);
        when(queryExecutor.execute(eq(GetBillingSpaceCreationToSendQuery.class), any(GetBillingSpaceCreationToSendRequest.class)))
                .thenReturn(expected);

        // Mock statique du mapper: toDomain(entity) -> mappedDomain
        try (MockedStatic<DocaposteEventHistoryEntityMapperToDomain> mockedStatic =
                     Mockito.mockStatic(DocaposteEventHistoryEntityMapperToDomain.class)) {
            mockedStatic.when(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(entity))
                        .thenReturn(mappedDomain);

            // Act
            BillingSpaceCreationToSend result = processor.process(entity);

            // Assert
            assertSame(expected, result, "Le processor doit retourner le résultat de QueryExecutor.execute(...)");
            verify(queryExecutor, times(1))
                    .execute(eq(GetBillingSpaceCreationToSendQuery.class), any(GetBillingSpaceCreationToSendRequest.class));

            // (Optionnel) Vérifie que le mapper statique a bien été appelé
            mockedStatic.verify(() -> DocaposteEventHistoryEntityMapperToDomain.toDomain(entity), times(1));
        }
    }
}