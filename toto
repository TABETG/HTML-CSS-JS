package com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.sender.job;

import com.bnpparibas.dsibddf.ap00420.streamfact.application.loanfolder.synchro.pojo.SynchroSendLoanFolder;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.sender.processor.BillingSpaceSendSynchroItemProcessor;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.billingspace.synchro.sender.writer.BillingSpaceSendSynchroItemWriter;
import com.bnpparibas.dsibddf.ap00420.streamfact.batch.listener.CommonStepExecutionListener;
import com.bnpparibas.dsibddf.ap00420.streamfact.infrastructure.sql.entities.history.model.DocaposteEventHistoryEntity;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.flow.FlowJob;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.item.ItemReader;
import org.springframework.transaction.PlatformTransactionManager;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 * Test JUnit4 100% coverage pour JobConfigurationSendSynchro.
 * Compatible SonarQube / Jenkins / Jacoco.
 */
@RunWith(MockitoJUnitRunner.class)
public class JobConfigurationSendSynchroTest {

    @InjectMocks
    private JobConfigurationSendSynchro configuration;

    @Mock
    private ItemReader<DocaposteEventHistoryEntity> reader;

    @Mock
    private BillingSpaceSendSynchroItemProcessor processor;

    @Mock
    private BillingSpaceSendSynchroItemWriter writer;

    @Mock
    private CommonStepExecutionListener commonStepExecutionListener;

    @Mock
    private PlatformTransactionManager platformTransactionManager;

    @Mock
    private JobRepository jobRepository;

    private Step sendSynchroStep;

    @Before
    public void setUp() {
        sendSynchroStep = configuration.sendSynchroStep(jobRepository);
    }

    @Test
    public void sendSynchroStep_should_be_built_correctly() {
        assertNotNull(sendSynchroStep);
        assertEquals("sendSynchroStep", sendSynchroStep.getName());
        assertTrue(sendSynchroStep instanceof TaskletStep);

        TaskletStep ts = (TaskletStep) sendSynchroStep;
        Object allow = org.springframework.test.util.ReflectionTestUtils.getField(ts, "allowStartIfComplete");
        assertTrue((Boolean) allow);
    }

    @Test
    public void sendSynchroJob_should_create_flow_job() {
        Job job = configuration.sendSynchroJob(jobRepository, sendSynchroStep);
        assertNotNull(job);
        assertTrue(job instanceof FlowJob);

        FlowJob flowJob = (FlowJob) job;
        assertEquals("sendSynchroJob", flowJob.getName());
        assertNotNull(flowJob.getStep("sendSynchroStep"));
    }

    @Test
    public void all_beans_should_not_be_null() {
        assertNotNull(configuration);
        assertNotNull(reader);
        assertNotNull(processor);
        assertNotNull(writer);
        assertNotNull(commonStepExecutionListener);
        assertNotNull(platformTransactionManager);
        assertNotNull(jobRepository);
    }

    @Test
    public void sendSynchroStep_should_invoke_dependencies() {
        JobConfigurationSendSynchro spyConfig = spy(configuration);
        doReturn(sendSynchroStep).when(spyConfig).sendSynchroStep(jobRepository);

        Job job = spyConfig.sendSynchroJob(jobRepository, sendSynchroStep);
        assertNotNull(job);
        verify(spyConfig).sendSynchroStep(jobRepository);
    }
}