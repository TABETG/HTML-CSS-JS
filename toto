package com.bnpparibas.dsibddf.ap10530.incident.application;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.bnpparibas.dsibddf.ap10530.incident.domain.dto.IncidentMoralRequestDto;
import com.bnpparibas.dsibddf.ap10530.incident.domain.dto.IncidentMoralResponseDto;
import com.bnpparibas.dsibddf.ap10530.incident.domain.mappers.BciFicpRequestMapper;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.IncidentBciFicpResult;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.IncidentsCharacteristics;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.IncidentsCharacteristics.OriginEnum;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.MSG_IN;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.PersonSearchRequest;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.Personne;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.ZCON_FONC_IN;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.enums.CTypeImmatEnum;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.enums.LegalNameEnum;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.enums.RequestTypeEnum;
import com.bnpparibas.dsibddf.ap10530.incident.domain.model.pm.ZCON_N_FAM;
import com.bnpparibas.dsibddf.ap10530.incident.domain.rest.BciFicpRestService;
import com.bnpparibas.dsibddf.ap10530.incident.domain.rest.PersoneMoraleRestService;
import com.bnpparibas.dsibddf.ap10530.incident.domain.utils.BDFKeyGenerator;
import com.bnpparibas.dsibddf.ap10530.incident.domain.utils.DebuggingUtils;
import com.bnpparibas.dsibddf.ap10530.incident.domain.utils.ISOBirthDateConverter;
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.fcc.service.FCCService;
import com.bnpparibas.dsibddf.ap10530.incident.infrastructure.ficp.service.FICPService;

/**
 * Orchestrator service : exécute la logique métier pour la recherche d'incidents.
 * Agrège les appels aux différents services (BCI, FICP BNPP, FICP BDF, FCC, référentiel PM)
 * et structure les résultats par origine.
 *
 * (Évolution AER_SOC-1529 : filtrage final des origines selon RequestType 4/5/6/7)
 */
@Component
public class IncidentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IncidentService.class);

    @Autowired
    private BciFicpRestService bciFicpService;

    @Autowired
    private FICPService ficpService;

    @Autowired
    private FCCService fccService;

    @Autowired
    private PersoneMoraleRestService pMService;

    // Mapper utilitaire (instanciation locale — pas @Autowired)
    private final BciFicpRequestMapper bciFicpMapper = new BciFicpRequestMapper();

    // ------------------------------------------ utilitaires existants
    private void generateBDFKeyList(final List<PersonSearchRequest> incidentsSearchRequest) {
        int i = 1;
        int taille = incidentsSearchRequest.size();
        for (final PersonSearchRequest person : incidentsSearchRequest) {
            final String bdfKey = BDFKeyGenerator.computeBDFKey(
                    person.getLastname(),
                    ISOBirthDateConverter.fromISOString(person.getBirthDate())
            );
            LOGGER.debug("computeBDFKey: name {}, birthDate {} = {}", person.getLastname(), person.getBirthDate(), bdfKey);
            LOGGER.info("Cle Banque de France de lappel {} sur {} : {}", i, taille, bdfKey);
            i = i + 1;
            person.setBdfKey(bdfKey);
        }
    }

    public FCCService getFccService() {
        return fccService;
    }

    public FICPService getFicpService() {
        return ficpService;
    }

    public void setFccService(final FCCService fccService) {
        this.fccService = fccService;
    }

    public void setFicpService(final FICPService ficpService) {
        this.ficpService = ficpService;
    }

    // ------------------------------------------ orchestrateur principal (existant)
    public List<IncidentsCharacteristics> searchIncident(
            final List<PersonSearchRequest> incidentsSearchRequest,
            final String channel,
            final String caller,
            String userId) throws Exception {

        final List<IncidentsCharacteristics> resultList = new ArrayList<>();

        int typeEntree = 1;
        if (incidentsSearchRequest.get(0).getPersonType() == null
                || incidentsSearchRequest.get(0).getPersonType().equals("0")) {

            for (PersonSearchRequest personSearchRequest : incidentsSearchRequest) {
                if (StringUtils.isEmpty(personSearchRequest.getPersonId())) {
                    typeEntree = 2;
                    break;
                }
            }
            if (2 == typeEntree) {
                for (PersonSearchRequest personSearchRequest : incidentsSearchRequest) {
                    if (null == personSearchRequest.getBirthDepartment()
                            || null == personSearchRequest.getBirthDate()
                            || null == personSearchRequest.getFirstname()
                            || null == personSearchRequest.getLastname()
                            || null == personSearchRequest.getCivility()) {
                        typeEntree = 0;
                        break;
                    }
                }
            }

            final IncidentBciFicpResult resultWrapper;
            final IncidentBciFicpResult resultWrapperSecond;
            List<PersonSearchRequest> incidentListRPBNPP = new ArrayList<>();
            List<PersonSearchRequest> incidentListBDFOnly = new ArrayList<>();

            if (typeEntree == 1) {
                if (incidentsSearchRequest.size() > 5) {
                    resultWrapper = bciFicpService.postRP(
                            bciFicpMapper.createBciFicpRequestRP(incidentsSearchRequest.subList(0, 5)),
                            incidentsSearchRequest.subList(0, 5)
                    );
                    resultWrapperSecond = bciFicpService.postRP(
                            bciFicpMapper.createBciFicpRequestRP(incidentsSearchRequest.subList(5, incidentsSearchRequest.size())),
                            incidentsSearchRequest.subList(5, incidentsSearchRequest.size())
                    );
                    resultWrapper.getIncidentListBCI().addAll(resultWrapperSecond.getIncidentListBCI());
                    resultWrapper.getIncidentListFCIPBNPP().addAll(resultWrapperSecond.getIncidentListFCIPBNPP());
                    resultWrapper.getIncidentListRPBNPP().addAll(resultWrapperSecond.getIncidentListRPBNPP());
                    LOGGER.debug("{} incident(s) found in BCI database by RP", resultWrapper.getIncidentListBCI().size());
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListBCI(), OriginEnum.BCI));
                    LOGGER.debug("{} incident(s) found in FICP BNPP database by RP", resultWrapper.getIncidentListFCIPBNPP().size());
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListFCIPBNPP(), OriginEnum.FICP_BNPP));

                    incidentListRPBNPP = resultWrapper.getIncidentListRPBNPP();
                    for (int i = 0; i < incidentListRPBNPP.size(); i++) {
                        incidentListRPBNPP.get(i).setConservPreuve(incidentsSearchRequest.get(i).getConservPreuve());
                        incidentListRPBNPP.get(i).setStatutPreuve(incidentsSearchRequest.get(i).getStatutPreuve());
                        incidentListRPBNPP.get(i).setNbCptesDossier(incidentsSearchRequest.get(i).getNbCptesDossier());
                        incidentListRPBNPP.get(i).setDureeContrat(incidentsSearchRequest.get(i).getDureeContrat());
                        incidentListRPBNPP.get(i).setDateDebutCredit(incidentsSearchRequest.get(i).getDateDebutCredit());
                        incidentListRPBNPP.get(i).setAppEmettrice(incidentsSearchRequest.get(i).getAppEmettrice());
                        incidentListRPBNPP.get(i).setRefExterne(incidentsSearchRequest.get(i).getRefExterne());
                        incidentListRPBNPP.get(i).setPersonId(incidentsSearchRequest.get(i).getPersonId());
                        incidentListRPBNPP.get(i).setNbPersFicp(incidentsSearchRequest.get(i).getNbPersFicp());
                        incidentListRPBNPP.get(i).setRibEtTypedeCompte(incidentsSearchRequest.get(i).getRibEtTypedeCompte());
                    }

                    incidentsSearchRequest.clear();
                    incidentsSearchRequest.addAll(incidentListRPBNPP);
                } else {
                    resultWrapper = bciFicpService.postRP(
                            bciFicpMapper.createBciFicpRequestRP(incidentsSearchRequest),
                            incidentsSearchRequest
                    );
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListBCI(), OriginEnum.BCI));
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListFCIPBNPP(), OriginEnum.FICP_BNPP));

                    incidentListRPBNPP = resultWrapper.getIncidentListRPBNPP();
                    for (int i = 0; i < incidentListRPBNPP.size(); i++) {
                        incidentListRPBNPP.get(i).setConservPreuve(incidentsSearchRequest.get(i).getConservPreuve());
                        incidentListRPBNPP.get(i).setStatutPreuve(incidentsSearchRequest.get(i).getStatutPreuve());
                        incidentListRPBNPP.get(i).setNbCptesDossier(incidentsSearchRequest.get(i).getNbCptesDossier());
                        incidentListRPBNPP.get(i).setDureeContrat(incidentsSearchRequest.get(i).getDureeContrat());
                        incidentListRPBNPP.get(i).setDateDebutCredit(incidentsSearchRequest.get(i).getDateDebutCredit());
                        incidentListRPBNPP.get(i).setAppEmettrice(incidentsSearchRequest.get(i).getAppEmettrice());
                        incidentListRPBNPP.get(i).setRefExterne(incidentsSearchRequest.get(i).getRefExterne());
                        incidentListRPBNPP.get(i).setPersonId(incidentsSearchRequest.get(i).getPersonId());
                        incidentListRPBNPP.get(i).setNbPersFicp(incidentsSearchRequest.get(i).getNbPersFicp());
                        incidentListRPBNPP.get(i).setRibEtTypedeCompte(incidentsSearchRequest.get(i).getRibEtTypedeCompte());
                    }

                    // ✅ FIX: réutiliser la variable déjà déclarée plus haut
                    incidentListBDFOnly.clear();
                    for (int j = 0; j < incidentsSearchRequest.size(); j++) {
                        if (incidentsSearchRequest.get(j).getRequestType().equals(RequestTypeEnum.BDF_ONLY)) {
                            incidentListBDFOnly.add(incidentsSearchRequest.get(j));
                        }
                    }
                    incidentsSearchRequest.clear();
                    incidentsSearchRequest.addAll(incidentListRPBNPP);
                    incidentsSearchRequest.addAll(incidentListBDFOnly);
                }

            } else if (typeEntree == 2) {
                generateBDFKeyList(incidentsSearchRequest);
                if (incidentsSearchRequest.size() > 5) {
                    resultWrapper = bciFicpService.post(
                            bciFicpMapper.createBciFicpRequest(incidentsSearchRequest.subList(0, 5))
                    );
                    resultWrapperSecond = bciFicpService.post(
                            bciFicpMapper.createBciFicpRequest(incidentsSearchRequest.subList(5, incidentsSearchRequest.size()))
                    );
                    resultWrapper.getIncidentListBCI().addAll(resultWrapperSecond.getIncidentListBCI());
                    resultWrapper.getIncidentListFCIPBNPP().addAll(resultWrapperSecond.getIncidentListFCIPBNPP());
                    LOGGER.debug("{} incident(s) found in BCI database", resultWrapper.getIncidentListBCI().size());
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListBCI(), OriginEnum.BCI));
                    LOGGER.debug("{} incident(s) found in FICP BNPP database", resultWrapper.getIncidentListFCIPBNPP().size());
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListFCIPBNPP(), OriginEnum.FICP_BNPP));
                } else {
                    resultWrapper = bciFicpService.post(
                            bciFicpMapper.createBciFicpRequest(incidentsSearchRequest)
                    );
                    if (LOGGER.isDebugEnabled()) {
                        LOGGER.debug("Incident(s) found : {}", DebuggingUtils.toJSon(resultWrapper));
                    }
                    LOGGER.debug("{} incident(s) found in BCI database", resultWrapper.getIncidentListBCI().size());
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListBCI(), OriginEnum.BCI));
                    LOGGER.debug("{} incident(s) found in FICP BNPP database", resultWrapper.getIncidentListFCIPBNPP().size());
                    resultList.add(new IncidentsCharacteristics(resultWrapper.getIncidentListFCIPBNPP(), OriginEnum.FICP_BNPP));
                }
            }

            final List<Personne> ficpIncidentList =
                    ficpService.searchIncident(incidentsSearchRequest, channel, caller, userId);
            LOGGER.debug("{} incident(s) found in FICP BDF database", ficpIncidentList.size());
            resultList.add(new IncidentsCharacteristics(ficpIncidentList, OriginEnum.FICP_BDF));

            final List<Personne> fccIncidentList =
                    fccService.searchIncident(incidentsSearchRequest, channel, caller, userId);
            LOGGER.debug("{} incident(s) found in FCC BDF database", fccIncidentList.size());
            resultList.add(new IncidentsCharacteristics(fccIncidentList, OriginEnum.FCC));

            if (typeEntree == 1) {
                resultList.add(new IncidentsCharacteristics(mapPersonnePhysique(incidentsSearchRequest), OriginEnum.RP));
            }

        } else if (("1").equals(incidentsSearchRequest.get(0).getPersonType())) {

            for (PersonSearchRequest personSearchRequest : incidentsSearchRequest) {
                if (StringUtils.isEmpty(personSearchRequest.getPersonId())) {
                    typeEntree = 2;
                    break;
                }
            }
            if (2 == typeEntree) {
                for (PersonSearchRequest personSearchRequest : incidentsSearchRequest) {
                    if (null == personSearchRequest.getImmatId() || null == personSearchRequest.getImmatType()) {
                        typeEntree = 0;
                        break;
                    }
                    personSearchRequest.setBdfKey(personSearchRequest.getImmatType() + personSearchRequest.getImmatId());
                }
            }

            if (typeEntree == 1) {
                List<Personne> listePersonne = new ArrayList<>();
                for (PersonSearchRequest req : incidentsSearchRequest) {
                    Personne pm = new Personne();
                    pm.setPersonId(req.getPersonId());

                    IncidentMoralResponseDto rep = pMService.post(createRestRequest(req));
                    if (rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF233().length > 0) {
                        req.setImmatId(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF233()[0].getcNumImmtrn());
                        rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF233()[0].setcTypeImmtrn(
                                CTypeImmatEnum.fromValue(
                                        rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF233()[0].getcTypeImmtrn()
                                ).toString()
                        );
                        req.setImmatType(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF233()[0].getcTypeImmtrn());
                        req.setBdfKey(req.getImmatType() + req.getImmatId());
                        pm.setBdfkey(req.getBdfKey());
                        pm.setImmatType(req.getImmatType());
                        pm.setImmatID(req.getImmatId());
                    } else {
                        LOGGER.debug("La famille 233 est vide");
                    }

                    if (rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF154().length > 0) {
                        pm.setFiscalAdress1(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF154()[0].getlAdrFisc1());
                        pm.setFiscalAdress2(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF154()[0].getlAdrFisc2());
                        pm.setFiscalAdress3(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF154()[0].getlAdrFisc3());
                        pm.setPostalCode(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF154()[0].getcAdrpFiscCpost());
                        pm.setVillePM(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF154()[0].getlNomComFisc());
                    } else {
                        LOGGER.debug("La famille 154 est vide");
                    }

                    if (rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF178().length > 0) {
                        pm.setBusinessName((rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF178()[0].getlRsoc()));
                    } else {
                        LOGGER.debug("La famille 178 est vide");
                    }

                    if (rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF096().length > 0) {
                        pm.setCodeLegalName(String.valueOf(rep.getMsg_out().getzConFoncOu().getzConLReponse().getData_pers().getF096()[0].getcNjurPrsne()));
                        pm.setLegalName(LegalNameEnum.fromValue(pm.getCodeLegalName()).toString());
                    } else {
                        LOGGER.debug("La famille 096 est vide");
                    }

                    listePersonne.add(pm);
                }
                resultList.add(new IncidentsCharacteristics(listePersonne, OriginEnum.RP));
            }

            List<Personne> fccIncidentList =
                    fccService.searchIncidentMoral(incidentsSearchRequest, channel, caller, userId);
            LOGGER.debug("{} incident(s) found in FCC BDF database", fccIncidentList.size());
            resultList.add(new IncidentsCharacteristics(fccIncidentList, OriginEnum.FCC_PM));
        }

        // ----------------------------------------------------------------------
        // >>> ÉVOLUTION AER_SOC-1529 : filtrage final des origines à renvoyer
        // (aucune suppression des appels/ajouts ci-dessus ; on filtre juste avant return)
        RequestTypeEnum requestType = (incidentsSearchRequest != null
                && !incidentsSearchRequest.isEmpty()
                && incidentsSearchRequest.get(0).getRequestType() != null)
                ? incidentsSearchRequest.get(0).getRequestType()
                : RequestTypeEnum.BOTH_BNP_BDF;

        boolean isPM = ("1").equals(incidentsSearchRequest.get(0).getPersonType());
        Set<OriginEnum> allowed = new HashSet<>();

        switch (requestType) {
            case BNP_ONLY:
                allowed.add(OriginEnum.BCI);
                allowed.add(OriginEnum.FICP_BNPP);
                allowed.add(OriginEnum.RP);
                break;
            case BDF_ONLY:
                allowed.add(OriginEnum.FICP_BDF);
                if (isPM) {
                    allowed.add(OriginEnum.FCC_PM);
                } else {
                    allowed.add(OriginEnum.FCC);
                }
                break;
            case BOTH_BNP_BDF:
                allowed.add(OriginEnum.BCI);
                allowed.add(OriginEnum.FICP_BNPP);
                allowed.add(OriginEnum.FICP_BDF);
                allowed.add(OriginEnum.FCC);
                allowed.add(OriginEnum.FCC_PM);
                allowed.add(OriginEnum.RP);
                break;
            case FICP_BDF_ONLY:   // 4
                allowed.add(OriginEnum.FICP_BDF);
                break;
            case FCC_BDF_ONLY:    // 5
                if (isPM) {
                    allowed.add(OriginEnum.FCC_PM);
                } else {
                    allowed.add(OriginEnum.FCC);
                }
                break;
            case FICP_BCEF_ONLY:  // 6
                allowed.add(OriginEnum.FICP_BNPP);
                break;
            case BCI_BCEF_ONLY:   // 7
                allowed.add(OriginEnum.BCI);
                break;
            default:
                allowed.add(OriginEnum.BCI);
                allowed.add(OriginEnum.FICP_BNPP);
                allowed.add(OriginEnum.FICP_BDF);
                allowed.add(OriginEnum.FCC);
                allowed.add(OriginEnum.FCC_PM);
                allowed.add(OriginEnum.RP);
        }

        resultList.removeIf(ic -> ic == null || ic.getOrigin() == null || !allowed.contains(ic.getOrigin()));
        // ----------------------------------------------------------------------

        return resultList;
    }

    // ------------------------------------------ mapping RP (existant)
    private List<Personne> mapPersonnePhysique(final List<PersonSearchRequest> incidentListRPBNPP) {
        List<Personne> personneIncidentList = new ArrayList<>();
        for (final PersonSearchRequest psr : incidentListRPBNPP) {
            if (psr != null) {
                final Personne pp = new Personne();
                pp.setFirstname(psr.getFirstname());
                pp.setLastname(psr.getLastname());
                pp.setCivility(psr.getCivility());
                pp.setBdfkey(psr.getBdfKey());
                pp.setMarriedName(psr.getMarriedName());
                pp.setBirthDate(psr.getBirthDate());
                pp.setBirthCity(psr.getBirthCity());
                pp.setBirthCountry(psr.getBirthCountry());
                pp.setBirthDepartment(psr.getBirthDepartment());
                personneIncidentList.add(pp);
            }
        }
        return personneIncidentList;
    }

    // ------------------------------------------ requête PM (existant)
    private IncidentMoralRequestDto createRestRequest(PersonSearchRequest input) {
        IncidentMoralRequestDto in = new IncidentMoralRequestDto();
        MSG_IN msgIn = new MSG_IN();
        ZCON_FONC_IN fonc = new ZCON_FONC_IN();

        fonc.setZCON_N_VERSION(1);
        fonc.setZCON_Q_LIST_FAM(4);
        fonc.setZCON_I_SDISTN_MSG("");
        fonc.setZCON_I_ENT_PRSNE("");
        fonc.setZCON_C_ETABL_MSG("");
        fonc.setZCON_C_LANGUE_MSG("");
        fonc.setZCON_C_APPL("");

        List<ZCON_N_FAM> temp = new ArrayList<>();
        temp.add(new ZCON_N_FAM(96));
        temp.add(new ZCON_N_FAM(154));
        temp.add(new ZCON_N_FAM(178));
        temp.add(new ZCON_N_FAM(233));
        fonc.setZCON_G_LIST_FAM(temp);

        fonc.setZCON_I_IDENT(input.getPersonId());
        fonc.setZCON_C_TYPE_IDENT("PE");
        msgIn.setZcon_FONC_IN(fonc);
        in.setMSG_IN(msgIn);
        return in;
    }
}
